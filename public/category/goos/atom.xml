<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: goos | The Code Dump]]></title>
  <link href="http://www.codelord.net/category/goos/atom.xml" rel="self"/>
  <link href="http://www.codelord.net/"/>
  <updated>2012-03-25T20:33:29+02:00</updated>
  <id>http://www.codelord.net/</id>
  <author>
    <name><![CDATA[Aviv Ben-Yosef]]></name>
    <email><![CDATA[aviv.by+blog@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Today I Got Burnt by Isolated Tests]]></title>
    <link href="http://www.codelord.net/2011/08/07/today-i-got-burnt-by-isolated-tests/"/>
    <updated>2011-08-07T23:06:26+03:00</updated>
    <id>http://www.codelord.net/2011/08/07/today-i-got-burnt-by-isolated-tests</id>
    <content type="html"><![CDATA[<p>Generally, I prefer the <a href="http://www.amazon.com/gp/product/0321503627/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627">GOOS</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321503627" style="width: 0; height: 0; display: none; border: none !important;"> school of TDD which includes isolating my classes as much as possible, putting mocks and stubs everywhere. Even though one of its known disadvantages is that you risk testing your classes in a fake environment that won't match the real production code using it, I've rarely come across a place where I got really bitten by it.</p>

<p>Today I set out with my pair to add some functionality to a certain class. That class had about 30-40 lines of code and about 10 test cases, which seemed quite decent. We added our changes TDD style and just couldn't get the thing working. After digging into it for a few more minutes we suddenly realized the class shouldn't be working at all and checking in the DB showed that indeed the last time that specific feature had any effect was 3 months ago!</p>

<p>Fortunately for us, all the problems that caused this bug are solved problems, we just need to get better at implementing the solutions:</p>

<p>Isolated tests go much better hand in hand with a few <strong><em>integration tests</em></strong> (some might say the right term is acceptance tests) that execute the whole system and make sure the features are working. Had we had those, we would have caught the bug much sooner.</p>

<p>The bug was introduced in a <strong><em>huge commit</em></strong> that changes 35 files and 1500 lines of code. We usually try and go over every commit made, even if it was paired, because we believe in collective code ownership, but it's impossible to go over such a huge diff and find these intricacies. Working in small baby steps makes it far less likely to break something and more likely that someone else will spot your mistakes. Huge refactorings give me the creeps.</p>

<p>After the change was committed, it was not <strong><em>followed-through</em></strong>: this specific feature is a feature you usually notice over a few days and we missed out on making sure it kept working. We moved on to other tasks and forgot all about it, thinking it was working all this time. Had we taken the time to make sure we were seeing, it would have been squashed by the next deployment.</p>

<p>Any of these would have helped us spot sooner that the isolated tests were actually testing the code against a scenario that never happens. These tiny changes of our workflow would have made several of our users happier over this timeframe.</p>

<p>Hopefully all is well now and the feature is back at 100%, but only time will tell whether we were able to learn from this mishap.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design is Simpler Now: Embrace the Extract]]></title>
    <link href="http://www.codelord.net/2011/03/30/design-is-simpler-now-embrace-the-extract/"/>
    <updated>2011-03-30T06:40:49+02:00</updated>
    <id>http://www.codelord.net/2011/03/30/design-is-simpler-now-embrace-the-extract</id>
    <content type="html"><![CDATA[<p>For the past 5 years or so I've been searching for ways to produce better designed code. I hate the fact I basically can't put my finger on why certain designs aren't as good as others.</p>

<p>That's why I was really blown away when I first learned about the <a href="http://www.amazon.com/gp/product/0135974445/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0135974445">SOLID</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0135974445" style="width: 0; height: 0; display: none; border: none !important;"> principles and started practicing <a href="http://www.amazon.com/gp/product/0321146530/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321146530">TDD</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321146530" style="width: 0; height: 0; display: none; border: none !important;">. At last I have found rules that gave me the capability to weigh designs, and a process that helped push me towards what feels like better code.</p>

<p>But even 5 rules were too much for me!</p>

<p>SOLID, no doubt, drives better design. My problem was incorporating it natively with my every day coding. Call me dumb, but I just can't bring myself to contemplate 5 different aspects whenever I whip up a class. I still find it as an excellent checklist to go through when I'm considering refactorings, but thinking about it constantly just drained a big part of my concentration.</p>

<p>For a few months now I've been getting the feeling that my OOD toolset has reduced quite a lot to the very essence. That feeling was also magnified by reading <a href="http://www.amazon.com/gp/product/0321503627/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627">GOOS</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321503627" style="width: 0; height: 0; display: none; border: none !important;"> and pretty much everything written by <a href="http://twitter.com/jbrains">J. B. Rainsberger</a> <a href="http://jbrains.ca">here</a> and <a href="http://blog.thecodewhisperer.com/">here</a>.</p>

<p>The first tool I use heavily (and I mean heavily, my mind has managed to get OCD about it) is duplication - or DRY. This tool alone makes any codebase a magnitude better. I've <a href="/category/dry/">written plenty</a> about DRY before.</p>

<p>But, just yesterday I realized that other than that, I mainly concentrate on one thing, as I contemplated on <a href="http://twitter.com/#!/avivby/status/52471700167737344">twitter</a>:</p>

<blockquote><p>I think I can sum up all my OOD skills with "wait, shouldn't this be in a different class/method?" Wondering if that's a good thing...</p></blockquote>

<p>Yup, that's the trick. I was quickly assured by two amazing guys that have been doing this longer than I've been breathing, agile manifesto authors:</p>

<blockquote><p><a href="http://twitter.com/#!/RonJeffries/status/52476402167066625">Ron Jeffries</a>: Yes it is a good thing. I would suspect you also note duplication?</p>

<p><a href="http://twitter.com/#!/jwgrenning/status/52472057719558144">James Grenning</a>: Think of the alternative.. you are asking the right question</p></blockquote>

<p>You see that? Noticing duplication and moving stuff somewhere else. That's all there's to it. This simple question directs at you the Single Responsibility Principle and generally, along with DRY, covers most of the bases needed to adhere to the <a href="http://www.jbrains.ca/permalink/the-four-elements-of-simple-design">elements of simple design</a>.</p>

<p>The main question I ask myself now every time I think of a problem, start changing a function, write a test, and at just about anytime I'm coding is "is this the right place for this?" And quite often the answer is "no." Push this forward and beautiful designs show up, designs of short, cohesive classes. So, to sum it up: <em><strong>Embrace the Extract</strong></em>.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Growing Object-Oriented Software]]></title>
    <link href="http://www.codelord.net/2011/01/10/book-review-growing-object-oriented-software/"/>
    <updated>2011-01-10T23:46:42+02:00</updated>
    <id>http://www.codelord.net/2011/01/10/book-review-growing-object-oriented-software</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627"><img src="http://www.codelord.net/images/posts_images/goos.jpg" style="float: right;"/></a></p>

<blockquote><p>Starting with a test means that we have to describe <strong>what</strong> we want to achieve before we consider <strong>how</strong>.</p></blockquote>

<p>2010, for me, was a year with quite a good reading list. It was when I first got to read some really good books such as Clean Code, Agile Software Development, TDD by Example and  Apprenticeship Patterns. These are all stellar books I highly recommend.</p>

<p>Yes, indeed it was an awesome year and yet I can tell you that the best book I read this year is <a href="http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627">Growing Object-Oriented Software, Guided by Tests</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321503627" style="width: 0; height: 0; display: none; border: none !important;"> (GOOS, for short).</p>

<p>I actually never heard of the authors before 2010. As opposed to books by authors such as Kent Beck and Robert Martin which one regularly hears about, I was quite astonished that I kept hearing about this book in different places.</p>

<p>I heard talks mention it, I saw lots of tweets about it and quite a few people that I highly value were praising it. This picked my interest and boy, am I glad I decided to add it to my pile.</p>

<p>I've read a lot about better development, better testing and better everything. And yet, I've never come across a book as thourough and as comprehensive as GOOS. If you read <a href="/2010/06/15/book-review-clean-code/">my</a> <a href="/2010/05/02/agile-software-development-you-will-never-code-the-same-again/">other</a> <a href="/2010/01/12/every-coder-should-read-tdd-by-example/">reviews</a> you will see that what usually buys me over are good code walk-throughs. Now let me tell you, you haven't seen a good walk-through until you've seen GOOS.</p>

<blockquote><p>Code isn't sacred just because it exists, and the second time won't take as long.</p></blockquote>

<p>On the one hand, the book is loaded with practical tips for making your tests better, faster, more readable and maintainable. It covers the nuances of testing ORM systems, GUIs, multi-threading problems and more.</p>

<p>On the other hand, every page turn is greeted with more nuggets of OOP lore. Actually, seeing all this wisdom clustered so tightly by people that have been struggling with these problems for over a decade now seems illegal to me. Are we really allowed to learn so many secrets of the profession this fast? Surely some sort of blood sacrifice has to be made?</p>

<blockquote><p>Once we start a major rework we can't stop until finished. There's a reason surgeons prefer keyhole surgery to opening up a patient.</p></blockquote>

<p>I've read GOOS over the course of a few months, consuming chapters little by little and letting the knowledge sink in. I was amazed at how much this affected my way of thinking about OOP and TDD, pretty much right off the covers. I already <a href="/2010/12/18/adding-goos-sauce-to-gwt-mvp/">blogged</a> about how my new OOP-Spidey-Sense helped us improve our architecture.</p>

<p>I'll finish with saying this book is a game-changer for me, even though I've been doing TDD for a few years now. To the authors, Nat and Steve, I take my hat off. They have earned a place of honor in my <a href="http://twitter.com/#!/avivby/deserve-a-beer">Deserve-A-Beer list</a>.</p>

<p>And to sum up all these great quotes from GOOS, here's another gem:</p>

<blockquote><p>The last thing we should have to do is crack open the debugger and step through the tested code to find the point of disagreement.</p></blockquote>

<p>You should subscribe to my <a href="http://feeds.feedburner.com/TheCodeDump">feed</a> and follow me on <a href="http://twitter.com/avivby">twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding GOOS Sauce to GWT MVP]]></title>
    <link href="http://www.codelord.net/2010/12/18/adding-goos-sauce-to-gwt-mvp/"/>
    <updated>2010-12-18T18:06:29+02:00</updated>
    <id>http://www.codelord.net/2010/12/18/adding-goos-sauce-to-gwt-mvp</id>
    <content type="html"><![CDATA[<p>For a few months now I've been using <a href="http://code.google.com/webtoolkit/">Google Web Toolkit</a>. One thing that was bothering me was that even when following the praised MVP (Model-View-Presenter) pattern as per the documentation, you pretty quickly get into messy land.</p>

<p>Here's a snippet from the official GWT MVP <a href="http://code.google.com/webtoolkit/articles/mvp-architecture.html">tutorial</a>:</p>

<p><div><script src='https://gist.github.com/746606.js?file=gistfile1.java'></script>
<noscript><pre><code>public void bind() {
    display.getSaveButton().addClickHandler(
        new ClickHandler() {
        @Override public void click(ClickEvent e) {
            // Magic happens here
        }
    });
}</code></pre></noscript></div>
</p>

<p>In this example, you see that our Presenter, when bound, registers a click handler for a button, in order to perform some action when it is called. This might seem nice and all, but there's a smell. This is a violation of the <a href="http://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a> (the missing SOLID rule, one might say).  This simply makes it harder to test, since we now have to add another layer of indirection between the SUT and its collaborators. Instead of making the view a tiny bit smarter, we use it as a dumb collection of widgets the presenter manages. This is clearly not in "Tell, don't ask" form.</p>

<p>The thing that really bothers me is how coupled the presenter gets with its view. Take the above example, and say that you decided that it would be better to have two "save" buttons on the UI. Does the presenter really care? Should it even change? And what if you actually want the save button to change to a remove button when the user picked something? Should the presenter now deal with getSaveOrRemoveButton() ? Of course not.</p>

<h3>GOOS it up</h3>

<p>After beating around this bush for quite some time, I decided to try and find a better way. I'm currently reading the brilliant Growing Object Oriented Software book, and decided to try its approach to push a better implementation. After a bit of refactoring I got this:</p>

<p><div><script src='https://gist.github.com/746606.js?file=gistfile2.java'></script>
<noscript><pre><code>public void bind() {
     display.addSaveClickHandler(new ClickHandler() {
         @Override public void click(ClickEvent e) {
             // Magic happens here
         }
     });
}</code></pre></noscript></div>
</p>

<p><a href="http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627"><img src="http://www.codelord.net/images/posts_images/goos.jpg" style="float: right;"/></a></p>

<p>This might seem like a tiny change. And it is. But it makes all the difference in the world in how more responsive your design gets, especially in our world where the view is most likely to change a dozen times before settling on something. Once there are enough of these, I push the presenter as a dependency into the view, and let it call the presenter directly. The funny thing is this style is actually implicitly mentioned in the <a href="http://code.google.com/webtoolkit/articles/mvp-architecture-2.html">second part</a> of the GWT MVP tutorial. Just some GOOSing helped us get to a better, more malleable design!</p>

<p>Don't be afraid to do something differently than the documentation, especially if you gave it a fair shot and it didn't work out.</p>

<p>You should subscribe to my <a href="http://feeds.feedburner.com/TheCodeDump">feed</a> and follow me on <a href="http://twitter.com/avivby">twitter</a>!</p>
]]></content>
  </entry>
  
</feed>
