<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clean code | The Code Dump]]></title>
  <link href="http://www.codelord.net/category/clean-code/atom.xml" rel="self"/>
  <link href="http://www.codelord.net/"/>
  <updated>2012-03-25T20:33:29+02:00</updated>
  <id>http://www.codelord.net/</id>
  <author>
    <name><![CDATA[Aviv Ben-Yosef]]></name>
    <email><![CDATA[aviv.by+blog@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Book Review: Growing Object-Oriented Software]]></title>
    <link href="http://www.codelord.net/2011/01/10/book-review-growing-object-oriented-software/"/>
    <updated>2011-01-10T23:46:42+02:00</updated>
    <id>http://www.codelord.net/2011/01/10/book-review-growing-object-oriented-software</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627"><img src="http://www.codelord.net/images/posts_images/goos.jpg" style="float: right;"/></a></p>

<blockquote><p>Starting with a test means that we have to describe <strong>what</strong> we want to achieve before we consider <strong>how</strong>.</p></blockquote>

<p>2010, for me, was a year with quite a good reading list. It was when I first got to read some really good books such as Clean Code, Agile Software Development, TDD by Example and  Apprenticeship Patterns. These are all stellar books I highly recommend.</p>

<p>Yes, indeed it was an awesome year and yet I can tell you that the best book I read this year is <a href="http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627">Growing Object-Oriented Software, Guided by Tests</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321503627" style="width: 0; height: 0; display: none; border: none !important;"> (GOOS, for short).</p>

<p>I actually never heard of the authors before 2010. As opposed to books by authors such as Kent Beck and Robert Martin which one regularly hears about, I was quite astonished that I kept hearing about this book in different places.</p>

<p>I heard talks mention it, I saw lots of tweets about it and quite a few people that I highly value were praising it. This picked my interest and boy, am I glad I decided to add it to my pile.</p>

<p>I've read a lot about better development, better testing and better everything. And yet, I've never come across a book as thourough and as comprehensive as GOOS. If you read <a href="/2010/06/15/book-review-clean-code/">my</a> <a href="/2010/05/02/agile-software-development-you-will-never-code-the-same-again/">other</a> <a href="/2010/01/12/every-coder-should-read-tdd-by-example/">reviews</a> you will see that what usually buys me over are good code walk-throughs. Now let me tell you, you haven't seen a good walk-through until you've seen GOOS.</p>

<blockquote><p>Code isn't sacred just because it exists, and the second time won't take as long.</p></blockquote>

<p>On the one hand, the book is loaded with practical tips for making your tests better, faster, more readable and maintainable. It covers the nuances of testing ORM systems, GUIs, multi-threading problems and more.</p>

<p>On the other hand, every page turn is greeted with more nuggets of OOP lore. Actually, seeing all this wisdom clustered so tightly by people that have been struggling with these problems for over a decade now seems illegal to me. Are we really allowed to learn so many secrets of the profession this fast? Surely some sort of blood sacrifice has to be made?</p>

<blockquote><p>Once we start a major rework we can't stop until finished. There's a reason surgeons prefer keyhole surgery to opening up a patient.</p></blockquote>

<p>I've read GOOS over the course of a few months, consuming chapters little by little and letting the knowledge sink in. I was amazed at how much this affected my way of thinking about OOP and TDD, pretty much right off the covers. I already <a href="/2010/12/18/adding-goos-sauce-to-gwt-mvp/">blogged</a> about how my new OOP-Spidey-Sense helped us improve our architecture.</p>

<p>I'll finish with saying this book is a game-changer for me, even though I've been doing TDD for a few years now. To the authors, Nat and Steve, I take my hat off. They have earned a place of honor in my <a href="http://twitter.com/#!/avivby/deserve-a-beer">Deserve-A-Beer list</a>.</p>

<p>And to sum up all these great quotes from GOOS, here's another gem:</p>

<blockquote><p>The last thing we should have to do is crack open the debugger and step through the tested code to find the point of disagreement.</p></blockquote>

<p>You should subscribe to my <a href="http://feeds.feedburner.com/TheCodeDump">feed</a> and follow me on <a href="http://twitter.com/avivby">twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding GOOS Sauce to GWT MVP]]></title>
    <link href="http://www.codelord.net/2010/12/18/adding-goos-sauce-to-gwt-mvp/"/>
    <updated>2010-12-18T18:06:29+02:00</updated>
    <id>http://www.codelord.net/2010/12/18/adding-goos-sauce-to-gwt-mvp</id>
    <content type="html"><![CDATA[<p>For a few months now I've been using <a href="http://code.google.com/webtoolkit/">Google Web Toolkit</a>. One thing that was bothering me was that even when following the praised MVP (Model-View-Presenter) pattern as per the documentation, you pretty quickly get into messy land.</p>

<p>Here's a snippet from the official GWT MVP <a href="http://code.google.com/webtoolkit/articles/mvp-architecture.html">tutorial</a>:</p>

<p><div><script src='https://gist.github.com/746606.js?file=gistfile1.java'></script>
<noscript><pre><code>public void bind() {
    display.getSaveButton().addClickHandler(
        new ClickHandler() {
        @Override public void click(ClickEvent e) {
            // Magic happens here
        }
    });
}</code></pre></noscript></div>
</p>

<p>In this example, you see that our Presenter, when bound, registers a click handler for a button, in order to perform some action when it is called. This might seem nice and all, but there's a smell. This is a violation of the <a href="http://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a> (the missing SOLID rule, one might say).  This simply makes it harder to test, since we now have to add another layer of indirection between the SUT and its collaborators. Instead of making the view a tiny bit smarter, we use it as a dumb collection of widgets the presenter manages. This is clearly not in "Tell, don't ask" form.</p>

<p>The thing that really bothers me is how coupled the presenter gets with its view. Take the above example, and say that you decided that it would be better to have two "save" buttons on the UI. Does the presenter really care? Should it even change? And what if you actually want the save button to change to a remove button when the user picked something? Should the presenter now deal with getSaveOrRemoveButton() ? Of course not.</p>

<h3>GOOS it up</h3>

<p>After beating around this bush for quite some time, I decided to try and find a better way. I'm currently reading the brilliant Growing Object Oriented Software book, and decided to try its approach to push a better implementation. After a bit of refactoring I got this:</p>

<p><div><script src='https://gist.github.com/746606.js?file=gistfile2.java'></script>
<noscript><pre><code>public void bind() {
     display.addSaveClickHandler(new ClickHandler() {
         @Override public void click(ClickEvent e) {
             // Magic happens here
         }
     });
}</code></pre></noscript></div>
</p>

<p><a href="http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627"><img src="http://www.codelord.net/images/posts_images/goos.jpg" style="float: right;"/></a></p>

<p>This might seem like a tiny change. And it is. But it makes all the difference in the world in how more responsive your design gets, especially in our world where the view is most likely to change a dozen times before settling on something. Once there are enough of these, I push the presenter as a dependency into the view, and let it call the presenter directly. The funny thing is this style is actually implicitly mentioned in the <a href="http://code.google.com/webtoolkit/articles/mvp-architecture-2.html">second part</a> of the GWT MVP tutorial. Just some GOOSing helped us get to a better, more malleable design!</p>

<p>Don't be afraid to do something differently than the documentation, especially if you gave it a fair shot and it didn't work out.</p>

<p>You should subscribe to my <a href="http://feeds.feedburner.com/TheCodeDump">feed</a> and follow me on <a href="http://twitter.com/avivby">twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes from the 5th Israeli Software Craftsmanship Meeting]]></title>
    <link href="http://www.codelord.net/2010/12/17/notes-from-the-5th-israeli-software-craftsmanship-meeting/"/>
    <updated>2010-12-17T11:28:07+02:00</updated>
    <id>http://www.codelord.net/2010/12/17/notes-from-the-5th-israeli-software-craftsmanship-meeting</id>
    <content type="html"><![CDATA[<p>This week I had the pleasure to attend to the 5th meeting of our Software Craftsmanship group, and boy what a meeting it was. For the first time we've tried a different format that is 100% hands-on and reduced someone-talking-with-slides time to a minimum.</p>

<p>The meeting was composed of 3 tables: a code review table where people actually brought code from home/work and discussed about with others, a TDD table where a veteran TDDer talked people through a Kata and a third table, led by yours truly, that aimed to introduce people to the concept of DRY and tackling some duplications problems.</p>

<p>Unfortunately for me, this means I couldn't take part in the other tables, but from what I could pick up I must say it was really fun getting so much positive feedback for a meeting.</p>

<p>The DRY table consisted of a Kata I've composed specifically to raise issues of duplication already a few minutes into it, which you can find <a href="/2010/12/11/serializer-kata-practicing-dry/">here</a>. It was amazing seeing people keep working on the Kata after the 1-hour dedicated to it was up, and I never expected to see such variety (Java, C#, Python, Ruby, JavaScript and PHP were all spotted)!</p>

<p>The slides from my (extremely) short introduction to DRY are available here:</p>

<script src="http://speakerdeck.com/embed/4f6dac1faa99e4002202a486.js"></script>


<p>You should subscribe to <a href="http://feeds.feedburner.com/TheCodeDump">my</a> feed and follow me on <a href="http://twitter.com/avivby">twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Serializer Kata: Practicing DRY]]></title>
    <link href="http://www.codelord.net/2010/12/11/serializer-kata-practicing-dry/"/>
    <updated>2010-12-11T19:46:14+02:00</updated>
    <id>http://www.codelord.net/2010/12/11/serializer-kata-practicing-dry</id>
    <content type="html"><![CDATA[<p>This kata is intended to help one practice the DRY principle (Don't Repeat Yourself). You can read more about DRY <a href="/category/dry/">here</a>.</p>

<p>A few notes:</p>

<ul>
<li>After completing a step in the Kata and before moving on to the next, take the time to make sure your code's duplication ≤ 0</li>
<li>For the sake of focus, you may ignore matters of character escaping, encoding, error handling, object graph cycles and the likes</li>
<li>Our focus is on <strong>reducing duplication</strong>, it is <strong>not finishing</strong> the kata</li>
</ul>


<p>In this Kata, our goal is to implement 2 simple object serializers. One serializer is to <a href="http://en.wikipedia.org/wiki/XML">XML</a>, the other is to <a href="http://en.wikipedia.org/wiki/JSON">JSON</a>.</p>

<ol>
<li>Support serializing  a class without any members

<ol>
<li>To XML: EmptyClass -> &lt;EmptyClass&gt;&lt;/EmptyClass&gt;</li>
<li>To JSON: EmptyClass -> {}</li>
</ol>
</li>
<li>Add support for serializing a class' integer members

<ol>
<li>To XML: IntClass(a=1, b=2) -> &lt;IntClass&gt;&lt;a&gt;1&lt;/a&gt;&lt;b&gt;2&lt;/b&gt;&lt;/IntClass&gt;</li>
<li>To JSON: IntClass(a=1, b=2) -> { "a": 1, "b": 2 }</li>
</ol>
</li>
<li>Add support for serializing a class' string members

<ol>
<li>To XML: StrClass(a="first", b="second") -> &lt;StrClass&gt;&lt;a&gt;first&lt;/a&gt;&lt;b&gt;second&lt;/b&gt;&lt;/StrClass&gt;</li>
<li>To JSON: StrClass(a="first", b="second") -> { "a": "first", "b": "second" }</li>
</ol>
</li>
<li>Add support for serializing a class' other class members

<ol>
<li>To XML: CompositeClass(inner=(a=1)) -> &lt;CompositeClass&gt;&lt;inner&gt;&lt;a&gt;1&lt;/a&gt;&lt;/inner&gt;&lt;/CompositeClass&gt;</li>
<li>To JSON: CompositeClass(inner=(a=1)) -> { "inner": { "a": 1 } }</li>
</ol>
</li>
</ol>


<p>If you found this interesting subscribe to my <a href="http://feeds.feedburner.com/TheCodeDump">feed</a> and follow me on <a href="http://twitter.com/avivby">twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Say No to Null Checks]]></title>
    <link href="http://www.codelord.net/2010/11/14/say-no-to-null-checks/"/>
    <updated>2010-11-14T22:23:01+02:00</updated>
    <id>http://www.codelord.net/2010/11/14/say-no-to-null-checks</id>
    <content type="html"><![CDATA[<p>Hey, do you check your methods' arguments to make sure they're not null?</p>

<p>Today, I got into a little discussion with a teammate about testing contracts of methods: should we check for null in every public method?</p>

<p>I was against it, and he was for it.</p>

<p>The simple reasons to do it are, first, that it makes your code more defensive. You fail explicitly instead of failing implicitly when the code tries to dereference the null object. Another argument was that given 20 callers of an interface, it's easier to test in the interface for the precondition than to test each and every one of the callers. And, of course, that it is better API implementation, and that even if a class isn't part of one's public API now it might very well become part of it in the future, so why not add the tests now?</p>

<p>I'll tackle these all. First, I have to agree that some null checks are required, at the boundaries of your system. I believe a system should have a paranoid barrier, before it everything is as suspect as someone going on a bus with a heavy coat on a hot day - that's just waiting to blow. Once you've passed the barrier you know things are secure and no longer need to be paranoid.</p>

<p>So yes, some null checks are of course required.</p>

<p>But, because we want our API to be user-friendly and error-proof does that mean we need to make every public method in our code paranoid just in case it will become part of the public API at some point? 5 letters: YAGNI! :)</p>

<p>The interesting part is the testing of the callers. I agree, if we have to write the test 20 times for each caller, it will get tedious. But we don't write the same thing twice, do we? As good old J.B Rainsberger <a href="http://blog.thecodewhisperer.com/post/207374113/who-tests-the-contract-tests">teaches</a>, what we actually need are collaboration tests. Each of the callers collaborate with the interface. And so, we create a collaboration test that makes sure the user is using the interface according to the contract. These are usually abstract tests that require us to create derivatives that implement a factory method for creating the calling class. This way we write the tests only once and make explicit the interface and contract, even in dynamic language.</p>

<p>In general, this is a powerful solution, that solves a basic problem with defensive programming. Say we do test for nullity wherever possible, what do we do then? Our system is likely to crash or throw an exception any way, since what is the interface to do? Obviously something is wrong if we were called in a way that doesn't match the contract, so is the hassle worth it? I think testing for nullity everywhere is a thing of the past, especially once you adopt dynamic programming and get used to the fact that most of the times you can't even be sure the object you've got will answer the methods you're about to use, so what difference does a null check make?</p>

<p>So let's write some awesome collaboration tests tests and get cracking!</p>

<p>You should subscribe to my <a href="http://feeds.feedburner.com/TheCodeDump">feed</a> and follow me on <a href="http://twitter.com/avivby">twitter</a>!</p>
]]></content>
  </entry>
  
</feed>
