<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: books | The Code Dump]]></title>
  <link href="http://www.codelord.net/category/books/atom.xml" rel="self"/>
  <link href="http://www.codelord.net/"/>
  <updated>2012-03-25T20:33:29+02:00</updated>
  <id>http://www.codelord.net/</id>
  <author>
    <name><![CDATA[Aviv Ben-Yosef]]></name>
    <email><![CDATA[aviv.by+blog@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[In the Mind of a Master Programmer]]></title>
    <link href="http://www.codelord.net/2011/07/25/in-the-mind-of-a-master-programmer/"/>
    <updated>2011-07-25T20:39:47+03:00</updated>
    <id>http://www.codelord.net/2011/07/25/in-the-mind-of-a-master-programmer</id>
    <content type="html"><![CDATA[<p>He would probably object to me calling him that, but I've long ago realized Kent Beck is one of the precious few who deserve the title "a mastermind". With <a href="http://www.amazon.com/gp/product/0321278658/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399381&amp;creativeASIN=0321278658">Extreme Programming</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321278658&camp=217145&creative=399381" style="width: 0; height: 0; display: none; border: none !important;">, <a href="http://www.amazon.com/gp/product/0321146530/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399381&amp;creativeASIN=0321146530">Test Driven Development</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321146530&camp=217145&creative=399381" style="width: 0; height: 0; display: none; border: none !important;">, <a href="http://www.threeriversinstitute.org/blog/?cat=6">Responsive Design</a>, the <a href="http://www.jbrains.ca/permalink/the-four-elements-of-simple-design">Four Elements of Simple Design</a> and more under his belt, who can claim otherwise?</p>

<p>After attending a workshop of his about a year ago and listening to him talk a whole day I was astonished. I tried to pick his brains to understand what makes him tick. Of course there are many factors here - reading over 10,000 books and being smarter than most would help anyone. But something a bit less common takes a major part in this in my opinion, what Kent told me he has: a "<em>habit of desperately wanting things to make sense"</em>Â and his ability to take things apart until they do.</p>

<p>I recently picked up another of Kent's books, <a href="http://www.amazon.com/gp/product/0321413091/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399381&amp;creativeASIN=0321413091">Implementation Patterns</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321413091&camp=217145&creative=399381" style="width: 0; height: 0; display: none; border: none !important;">. I love this book because it shows exactly that: his process of thinking and breaking things apart in order to understand them. The book provides a rare glimpse to his method of decomposition. Since I've been coding for years, a lot of the patterns made sense to me or seemed trivial. But the "magic" is the fact he was able to put into words things that for me were just hunches. Actually explaining what makes you sense a method is too long or what is a proper name for a variable is something I've never seen done with such care to specifics.</p>

<p>Because it's such a quick read, I think anyone will benefit by reading Implementation Patterns. More than helping you understand our craft better, it will provide a new outlook on decomposing and judging your designs and pretty much everything else.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Growing Object-Oriented Software]]></title>
    <link href="http://www.codelord.net/2011/01/10/book-review-growing-object-oriented-software/"/>
    <updated>2011-01-10T23:46:42+02:00</updated>
    <id>http://www.codelord.net/2011/01/10/book-review-growing-object-oriented-software</id>
    <content type="html"><![CDATA[<p><a href="http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627"><img src="http://www.codelord.net/images/posts_images/goos.jpg" style="float: right;"/></a></p>

<blockquote><p>Starting with a test means that we have to describe <strong>what</strong> we want to achieve before we consider <strong>how</strong>.</p></blockquote>

<p>2010, for me, was a year with quite a good reading list. It was when I first got to read some really good books such as Clean Code, Agile Software Development, TDD by Example and  Apprenticeship Patterns. These are all stellar books I highly recommend.</p>

<p>Yes, indeed it was an awesome year and yet I can tell you that the best book I read this year is <a href="http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627">Growing Object-Oriented Software, Guided by Tests</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321503627" style="width: 0; height: 0; display: none; border: none !important;"> (GOOS, for short).</p>

<p>I actually never heard of the authors before 2010. As opposed to books by authors such as Kent Beck and Robert Martin which one regularly hears about, I was quite astonished that I kept hearing about this book in different places.</p>

<p>I heard talks mention it, I saw lots of tweets about it and quite a few people that I highly value were praising it. This picked my interest and boy, am I glad I decided to add it to my pile.</p>

<p>I've read a lot about better development, better testing and better everything. And yet, I've never come across a book as thourough and as comprehensive as GOOS. If you read <a href="/2010/06/15/book-review-clean-code/">my</a> <a href="/2010/05/02/agile-software-development-you-will-never-code-the-same-again/">other</a> <a href="/2010/01/12/every-coder-should-read-tdd-by-example/">reviews</a> you will see that what usually buys me over are good code walk-throughs. Now let me tell you, you haven't seen a good walk-through until you've seen GOOS.</p>

<blockquote><p>Code isn't sacred just because it exists, and the second time won't take as long.</p></blockquote>

<p>On the one hand, the book is loaded with practical tips for making your tests better, faster, more readable and maintainable. It covers the nuances of testing ORM systems, GUIs, multi-threading problems and more.</p>

<p>On the other hand, every page turn is greeted with more nuggets of OOP lore. Actually, seeing all this wisdom clustered so tightly by people that have been struggling with these problems for over a decade now seems illegal to me. Are we really allowed to learn so many secrets of the profession this fast? Surely some sort of blood sacrifice has to be made?</p>

<blockquote><p>Once we start a major rework we can't stop until finished. There's a reason surgeons prefer keyhole surgery to opening up a patient.</p></blockquote>

<p>I've read GOOS over the course of a few months, consuming chapters little by little and letting the knowledge sink in. I was amazed at how much this affected my way of thinking about OOP and TDD, pretty much right off the covers. I already <a href="/2010/12/18/adding-goos-sauce-to-gwt-mvp/">blogged</a> about how my new OOP-Spidey-Sense helped us improve our architecture.</p>

<p>I'll finish with saying this book is a game-changer for me, even though I've been doing TDD for a few years now. To the authors, Nat and Steve, I take my hat off. They have earned a place of honor in my <a href="http://twitter.com/#!/avivby/deserve-a-beer">Deserve-A-Beer list</a>.</p>

<p>And to sum up all these great quotes from GOOS, here's another gem:</p>

<blockquote><p>The last thing we should have to do is crack open the debugger and step through the tested code to find the point of disagreement.</p></blockquote>

<p>You should subscribe to my <a href="http://feeds.feedburner.com/TheCodeDump">feed</a> and follow me on <a href="http://twitter.com/avivby">twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Book Review: Clean Code]]></title>
    <link href="http://www.codelord.net/2010/06/15/book-review-clean-code/"/>
    <updated>2010-06-15T19:45:19+03:00</updated>
    <id>http://www.codelord.net/2010/06/15/book-review-clean-code</id>
    <content type="html"><![CDATA[<p>This is another post in my <a href="/category/books/">book reviews series</a>. I finished reading <a href="http://www.amazon.com/gp/product/0132350882?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0132350882">Clean Code</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0132350882" style="width: 0; height: 0; display: none; border: none !important;"> a few days ago and loved it. It makes me feel good, seeing my decision to wear the Clean Code <a href="http://bit.ly/aPug4e">wristband</a> a few months ago was a smart one.</p>

<p>After I finished it, I felt a bit weird writing a blog post about it, because, just like the previous books I've blogged about, I found this book simply awesome. Then I thought about the fact it's simply because I'm reading those books that show up enough in other contexts that I upped them in my reading queue enough to get on top.</p>

<p>The book is about practical, low level details of writing good code. There are chapters about comments, naming, functions, you name it. In a way, it reminds me of <a href="http://www.amazon.com/gp/product/0735619670?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735619670">Code Complete</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0735619670" style="width: 0; height: 0; display: none; border: none !important;">, other than the fact you can see it's oriented for more practiced developers.</p>

<p>Like in his <a href="http://www.amazon.com/gp/product/0135974445?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0135974445">Agile Software Development</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0135974445" style="width: 0; height: 0; display: none; border: none !important;"> book, Uncle Bob made sure to fill this one with code. Actually, this book has a lot more code. There are many examples of code still being worked on. It actually fills the gap I've felt in Agile Software Development of seeing the actual coding steps, test by test. The last chapter shows a really thorough (and actually quite mesmerizing) example of refactoring, with each change explained beforehand, including tests and alternatives considered.</p>

<p>In Agile Software Development, there were a few co-authored chapters. In Clean Code Uncle Bob took this a step further. Almost every chapter was written by a different author, each of very big caliber in the Agile and Software Craftsmanship world. This really resonated with me, because it's kind of a "many in one" deal, and because I could actually hear a different tone in each chapter, and yet all were in harmony with the motive of clean code.</p>

<p>I think this is truly a masterpiece, and after reading, would recommend it to be read before Agile Software Development. Due to its greater technicality and the fact it's quite new, it makes a really good read for developers, and it will have an effect on your coding a few pages in (pages! not even chapters).</p>

<p>The only thing that bothered me was that in the last chapter (which is also the best) I had to, as the introduction warned me, flip back and forth quite a bit, which was a bit hard at first since I'm not used to reading code on paper. I'd really love seeing some interactive version of this, but regardless of that, the book is really good.</p>

<p>I can't recommend enough this concentrated piece of wisdom and experience.</p>

<p>Stay tuned, a review of <a href="http://www.amazon.com/gp/product/0596518382?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596518382">Apprenticeship Patterns</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0596518382" style="width: 0; height: 0; display: none; border: none !important;"> is nigh.</p>

<p>You should subscribe to my feed and follow me on twitter.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile Software Development: You Will Never Code The Same Again]]></title>
    <link href="http://www.codelord.net/2010/05/02/agile-software-development-you-will-never-code-the-same-again/"/>
    <updated>2010-05-02T20:30:17+03:00</updated>
    <id>http://www.codelord.net/2010/05/02/agile-software-development-you-will-never-code-the-same-again</id>
    <content type="html"><![CDATA[<p>How often do you get to work along some coding superstar that's been at it for decades? If you're anything like me, the answer is "never". That's why I've recently decided to go after books that are aimed to fill this gap exactly. The latest is <a href="http://www.amazon.com/gp/product/0135974445?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0135974445">"Agile Software Development: Principles, Patterns, and Practices"</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0135974445" style="width: 0; height: 0; display: none; border: none !important;"> by the one and only, <a href="http://bit.ly/c9CPQn">Uncle Bob</a> (the previous is <a href="/2010/01/12/every-coder-should-read-tdd-by-example/">"TDD by example"</a>, which gets 5 stars from me too).</p>

<h3>It's like coding with the Uncle himself</h3>

<p>The thing I liked the most about the book, is the way it walks through (relatively) huge amounts of code. Uncle Bob shows several programming problems and walks through his design process and the implementation of the interesting parts. Reading it (even though it was written almost a decade ago) you can't miss the fact the author has so much experience. Whenever I tried coding a solution myself before reading on, I later found out exactly where I went wrong because he somehow managed to cover every decision I made.</p>

<p>When I say it's like coding with him, I really mean it. I don't know how, but whenever I looked at a code sample I didn't like for some reason, I was astonished to read "You may be wondering why I did X" the next paragraph. And, maybe less fun, is when I read something, totally agreed with it, and he went on to explain why it sucks.</p>

<p>The feeling throughout reading the book is that you get to pair with one of the best software craftsmen ever.</p>

<h3>You get experience in every paragraph</h3>

<p>A big part of the book is dedicated to talking about XP and design patterns. I've read several books about both and yet I didn't find those parts in the book redundant. The reason is because Uncle Bob has managed to put a few grains of experience into whatever he talked about. Even though I've coded my fair share of Factories, he made me realize a few interesting concepts about them. And although I've done Visitors, I suddenly am a bit in love with them (which means I have to fight myself extra-hard not to introduce them everywhere).</p>

<p>If you don't have people around you that care about coding a lot (enough to send out awesome <a href="http://bit.ly/aPug4e">Clean Code wristbands</a>, one of which I own) you'll quickly grasp what I'm talking about. The whole writing is of an experienced mentor (which might explain why his company is called "Object Mentor").</p>

<h3>It simply changes the way you look at coding</h3>

<p>Having gone through the <a href="http://bit.ly/bs003B">SOLID principles</a>, my whole designing process and way of thinking has changed. I can't think of a sane developer that will refuse to put his hands on a set of principles that the best coders of the past decades have deemed as necessary for quality code.</p>

<p>Do yourself a favor and get your hands on this piece of software-craftsmanship gold-mine!</p>

<p>Stay tuned for the next part of this series, Uncle Bob's <a href="http://www.amazon.com/gp/product/B001GSTOAM?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B001GSTOAM">Clean Code</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=B001GSTOAM" style="width: 0; height: 0; display: none; border: none !important;">!</p>

<p>You should <a href="http://twitter.com/avivby">follow me</a> on twitter and subscribe to my <a href="http://feeds.feedburner.com/TheCodeDump">RSS feed</a>, it's free!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Every Coder Should Read TDD By Example]]></title>
    <link href="http://www.codelord.net/2010/01/12/every-coder-should-read-tdd-by-example/"/>
    <updated>2010-01-12T23:39:18+02:00</updated>
    <id>http://www.codelord.net/2010/01/12/every-coder-should-read-tdd-by-example</id>
    <content type="html"><![CDATA[<p>I've just finished reading Kent Beck's <a href="http://www.amazon.com/gp/product/0321146530?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321146530">TDD by Example</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321146530" style="width: 0; height: 0; display: none; border: none !important;">, and man, whatÂ a great reading that was. It was so good, I'm gonna put it in my topÂ 10 books list (accompanied by other classics, like <a href="http://www.amazon.com/gp/product/020161622X?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=020161622X">The Pragmatic Programmer</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=020161622X" style="width: 0; height: 0; display: none; border: none !important;"> and Beck's probably most known book, <a href="http://www.amazon.com/gp/product/0321278658?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321278658">Extreme Programming Explained</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321278658" style="width: 0; height: 0; display: none; border: none !important;">).</p>

<p>I've been doing TDD (to an extent, say at least half of my productionÂ code) for the past 4 years or so. I was pretty sure I knew what theÂ deal is, and there's no doubt it's paying off. I didn't think there'sÂ a lot more for me to learn. I thought to myself, "how much better canÂ it get?"</p>

<p>Lately, a lot of anti-TDD posts have been popping up on the interweb,Â which made me ponder a bit more about it. Furthermore, I've beenÂ exposed to more casts and the likes regarding TDD that made me think IÂ just might be able to squeeze some more fun from my TDD.</p>

<p>That's when I realized my work place has a copy of the "TDD byÂ Example" book. I'm a sucker for books, and having liked Kent's writingÂ so far, decided to add it to my book queue, and actually pushed it allÂ the way to the top.</p>

<p>It's a very light and fun reading. The style is a lot to my taste, andÂ easy to follow (even for someone whose mother tongue isn'tÂ English). But other than the pure writing style, there are just soÂ many gold nuggets in that book. Just about every page has somethingÂ golden.</p>

<p>Most coders will never have access to such a super-star-coder, thatÂ literally changed the way we work. This book is a great way to rub offÂ some of that genius. The simplicity in which design decisions areÂ explained is astonishing. I myself typed along all the code in theÂ book as I read it. Sometimes I tried writing ahead, comparing myÂ results to Kent's, and every time I was surprised. The cleanliness heÂ shows, the delicate thinking, truly amazing stuff.</p>

<p>Other than that, given all the critisicm that's been direct at TDDÂ lately, the book explains in great detail what are TDD's objectives,Â how it can be used productively, and what should you expect of it.</p>

<p>And now, the really good stuff. The major pay-off I'm seeingÂ currently, is that I found out a few ways to make TDD even better forÂ me. Yes, the bug count is already low, but you can get it evenÂ lower. Not just that, picking up a few tips from Beck makes me thinkÂ about the design of my code better, and simply make you a better coder.</p>

<p>Actually, most of my TDDÂ "education" is informal. Someone once explained the concept to me,Â and with time I refined my ways a bit using experience gained andÂ knowledge found on the web. Reading <em>the</em> bookÂ on TDD, you find there are namesÂ for things you've already been doing, but never given much thought to. Moreover, there's just that thing aboutÂ naming things - sometimes it simply makes you understand them better.</p>

<p>I think I'll stop writing any further, before this will make me lookÂ like I'm stalking Beck. But really, you <strong>should read this book</strong>. It's soÂ good, I'm going to order my own copy simply to have it around. Yes,Â <em>that</em> good.</p>

<p>You should follow me on twitter <a href="http://twitter.com/avivby">here</a>.</p>
]]></content>
  </entry>
  
</feed>
