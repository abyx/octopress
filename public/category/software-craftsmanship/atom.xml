<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: software craftsmanship | The Code Dump]]></title>
  <link href="http://www.codelord.net/category/software-craftsmanship/atom.xml" rel="self"/>
  <link href="http://www.codelord.net/"/>
  <updated>2012-03-25T20:33:29+02:00</updated>
  <id>http://www.codelord.net/</id>
  <author>
    <name><![CDATA[Aviv Ben-Yosef]]></name>
    <email><![CDATA[aviv.by+blog@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Notes from the Agile Practitioners 2012 Improving Your TDD Workshop]]></title>
    <link href="http://www.codelord.net/2012/03/01/notes-from-the-agile-practitioners-2012-improving-your-tdd-workshop/"/>
    <updated>2012-03-01T08:01:16+02:00</updated>
    <id>http://www.codelord.net/2012/03/01/notes-from-the-agile-practitioners-2012-improving-your-tdd-workshop</id>
    <content type="html"><![CDATA[<p><blockquote><p>If you write a test and it passes, the question is if the previous step was too big.<br/>The DRY principle doesn't talk about code, but knowledge.<br/>Clever is never something to be proud of in your code.</p><footer><strong>Corey Haines</strong> <cite>Improving Your TDD</cite></footer></blockquote></p>

<p>A couple of days after <a href="/2012/02/28/notes-from-the-israeli-software-craftsmanship-group-code-retreat/">attending the code retreat</a> facilitated by him, I was fortunate to attend Corey Haines's “<a href="http://agilepractitioners2012.com/conference-program/corey-haines-improving-your-tdd/">Improving Your TDD</a>” workshop at the <a href="http://agilepractitioners2012.com/">Agile Practitioners 2012</a> conference. These are some of my notes from the day.</p>

<p>The workshop was intended at coders familiar with TDD and not introductory. I was very interested to see how in-depth TDD training looks, and also meet other coders from Israel that have been doing TDD for a few years. It was quite awesome to sit in a room where everyone felt comfortable with TDD and it wasn't this new and hard thing. When the group shares this "advanced" technique, discussion can suddenly level up and we could all dive in to the nitty gritty stuff.</p>

<p>During the day, Corey walked us through pretty much taking TDD apart and putting it back together. We started from the history of TDD and its predecessors (manual verification, test after, test first, etc.).</p>

<p>The exercises throughout the day (that I especially enjoyed since I was pairing with <a href="http://twitter.com/theyonibomber">@theyonibomber</a>, my original pair as we were learning TDD together back in 2006) had this beautiful flow of making you smack right into a problem in the way most people do TDD.</p>

<p>We discussed having the tests drive an implementation that we knew we did not want (like sorting easily become bubble sort) and how the (relatively new) <a href="http://cleancoder.posterous.com/the-transformation-priority-premise">Transformation Priority Premise</a> by Uncle Bob can help solve this.</p>

<p>We then took another introspective look at our TDD process (aided by an exercise once more) that made us face the problem of "flailing" and "sitting in red" - basically the problem of trying to take a step too big in the next test and so falling off the good fast rhythm of "<a href="http://programmingtour.blogspot.com/2009/03/time-to-green-graphs-with-gary.html">time to green</a>".</p>

<p>We had a long discussion about these problems and how they are directly connected to the way we pick the next test. We all know that the next test should be the "simplest thing", but how exactly do we define simple?</p>

<p>I love having these discussions that jolt me and make me rethinks stuff I've long ago stopped paying attention to. Developer introspection is a thing of beauty and much power (Kent Beck tells that he wrote his incredible <a href="http://www.amazon.com/gp/product/013476904X/ref=as_li_ss_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=013476904X">Smalltalk Best Practice Patterns</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=013476904X" style="width: 0; height: 0; display: none; border: none !important;"/> and <a href="http://www.amazon.com/gp/product/0321413091/ref=as_li_ss_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321413091">Implementation Patterns</a> <img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321413091" style="width: 0; height: 0; display: none; border: none !important;"/>  books by simply stopping whenever he was about to type some code and have an explanation as to why he picked to do it that way).</p>

<p>Corey even did a live demo of his TDD style and programming by wishful thinking. It was very interesting, but as all live demos go he had some trouble along the way. Workshop aside, it is not trivial for someone giving a training to admit a mistake done, and Corey gracefully handled the situation.</p>

<p>All in all, the day was a very productive one and it still has me chewing on some of the lessons we learned. It's fun realizing again that there's no limit to how much one can sharpen a specific skill. Hat off to Corey and the conference organizers for making this happen!</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed or <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes from the Israeli Software Craftsmanship Group Code Retreat]]></title>
    <link href="http://www.codelord.net/2012/02/28/notes-from-the-israeli-software-craftsmanship-group-code-retreat/"/>
    <updated>2012-02-28T22:52:47+02:00</updated>
    <id>http://www.codelord.net/2012/02/28/notes-from-the-israeli-software-craftsmanship-group-code-retreat</id>
    <content type="html"><![CDATA[<p>A month ago I had the great pleasure of participating in a <a href="http://coderetreat.org/about">Code Retreat</a> here in Israel, which was facilitated by the amazing <a href="http://www.coreyhaines.com/">Corey Haines</a>. The event was so awesome and fun that I just put together a few tidbits that I think are worth sharing.</p>

<p>This was actually the third code retreat that I took part in, but funny enough the first retreat where I was a plain participant. I've facilitated two code retreats previously, one at the <a href="http://globalday.coderetreat.org/">Global Day of Code Retreat 2011</a>, and one internal retreat at the <a href="http://en.wikipedia.org/wiki/Israel_Defense_Forces">IDF</a> unit I used to serve in.</p>

<p>I wasn't sure going to a third retreat would provide new take-aways, but it sure did!</p>

<p>The first thing that was different from previous retreats was that Corey shared his views on coding. I was already familiar with most of the ideas that he mentioned, but he has a way of making ideas seem simpler that I originally thought, which is very powerful. I also loved seeing how other developers less familiar with these concepts reacted to them.</p>

<p>I was surprised the problem can still be interesting after a couple dozen attempts. This is something I never thought I'd see. I've seen the code retreat problem (<a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway's Game of Life</a>) solved a few dozen times previously, and wasn't sure I'd still get a lot out of doing it a few times again this retreat. To my astonishment, every pair I worked with in the retreat brought with him new ideas and considerations, and Corey had us focus on different aspects of programming in each session (there were 5 sessions).</p>

<p>I'm amazed that we could write the little function that checks whether two cells are neighbors in so many ways and still think hard about it. In one of the sessions, my pair, Elad Sofer, and I were debating the cleanliness of using euclidean distance for this back and force. Corey stood and listened to us talking, though we were speaking Hebrew and he couldn't get too much out of it. When I asked him if he wanted us to switch to English, he had this Neo moment and said "I think I understand what you're talking about" and a minute later he just chimed in and helped us point out the part of the code that wasn't fitting in. Such a discussion over 2 lines of code - FUN!</p>

<p>In general, I loved seeing the spark in people's eyes and the full power of passionate developers, talking, discussing and caring about their code. As someone who cares about each and every character in source files, I had a blast being around the passionate people, all bathing in the glory of the joy of programming.</p>

<p>Putting limitations on our code as we were solving the same problem kept making it appear as a total different problem. The things you can do when you're strictly adhering to the 4 rules of simple design are so different of those that appear when you and your pair aren't allowed to speak and just communicate via the code and the tests (no comments allowed! (which is always a good rule)).</p>

<p>Another reason I had a blast was that because, to be honest, I picked the pairs I really wanted to work with, having only 5 precious sessions to work with people I never get to work with regularly (though given 5 more sessions, I would have liked to pair with a few more of the people who attended). Working only with people that I knew were awesome, though not necessarily worked with before was a great boost. My awesome pairs were <a href="https://twitter.com/#!/alonhorev">alonhorev</a>, <a href="https://twitter.com/#!/avihut">avihut</a>, <a href="https://twitter.com/#!/yonbergman">yonbergman</a>, <a href="https://twitter.com/#!/pembleton">pembleton</a> and <a href="https://twitter.com/#!/eladsof">eladsof</a>.</p>

<p>We did TDD in all the sessions, but it was fun sometimes working with people out of their comfort zone, seeing how they react and how I had to be clearer. Sometimes it was just a matter of working in an editor they're less familiar with, and sometimes I had to teach Ruby while we were at it. Having to formalize in words every thing you do has the power of making you aware of a lot of the little decisions you usually make unconsciously, which is always a great thing. And I loved picking up little tricks I didn't know from my pairs.</p>

<p>All in all, the retreat once again proved out to be an awesome opportunity to focus on the fact that we're all doing this because we love coding, and reminding us that it's fun and that we can always learn and become better at it.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed or <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extend Your Toolbox: Custom Matchers]]></title>
    <link href="http://www.codelord.net/2012/02/04/extend-your-toolbox-custom-matchers/"/>
    <updated>2012-02-04T14:53:41+02:00</updated>
    <id>http://www.codelord.net/2012/02/04/extend-your-toolbox-custom-matchers</id>
    <content type="html"><![CDATA[<p>I'd like to point out a really nice testing practice that I've been loving more and more lately.</p>

<p>Just about every mature testing framework out there supports the concept of custom matchers, which provide us with the ability to define our very own assertions seamlessly into the tests. Even though this ability is quite old, we don't see it used too often and I think that's a shame. I've seen this practice heavily used in the mind expanding <a href="http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=shr&amp;camp=213733&amp;creative=393185&amp;creativeASIN=0321503627">GOOS</a> book and just now am starting to realize its awesomeness.</p>

<p>Note: examples in this post are shown in Ruby using <a href="https://github.com/dchelimsky/rspec/wiki/Custom-Matchers">RSpec's matchers</a> but the concept is pretty much identical (as can be seen for example in Java's <a href="http://code.google.com/p/hamcrest/wiki/Tutorial">Hamcrest Matchers</a>).</p>

<h3>Matchers 101</h3>

<p>Creating your own matcher usually means creating a Matcher class that performs the assertions, supplies human readable error messages and a nice constructor.</p>

<p>Here's an example from the <a href="https://github.com/dchelimsky/rspec/wiki/Custom-Matchers">RSpec documentation</a>:</p>

<p><div><script src='https://gist.github.com/1737631.js?file=rspec_matcher.rb'></script>
<noscript><pre><code>RSpec::Matchers.define :be_a_multiple_of do |expected|
  match do |actual|
    actual % expected == 0
  end
end</code></pre></noscript></div>
</p>

<h3>Matchers increase readability and intent</h3>

<p>As you should know, one of the <a href="http://c2.com/cgi/wiki?XpSimplicityRules">most important rules for design</a> is <em>Reveals Intent</em>. Take a quick look here, which way do you think reveals more intent?</p>

<p><div><script src='https://gist.github.com/1737631.js?file=intent.rb'></script>
<noscript><pre><code># This
response['X-Runtime'].should =~ /[\d\.]+/

# .. or this?
response['X-Runtime'].should be_a_number</code></pre></noscript></div>
</p>

<p>Also, which error message do you prefer? "expected false to be true" or something along the lines of "expected comment to be anonymous"?</p>

<h3>Matchers create robust tests</h3>

<p>The most important advantage of all is how using matchers easily allows you to steer away from fragile tests which are the bane of a lot of testing efforts.
The mark of good tests is that a change in your code doesn't require you to perform changes in multiple tests that don't really care for the change.
Take this code for example:</p>

<p><div><script src='https://gist.github.com/1737631.js?file=sucky_non_dry.rb'></script>
<noscript><pre><code>expected_comment = Comment.new(anonymous: true, user: &quot;the dude&quot;, reply_to: nil)
commentor.should_receive(:add).with(expected_comment)</code></pre></noscript></div>
</p>

<p>This might seem like a standard test, but that's not really the case. A test should assert for a single piece of knowledge, and this test actually checks several. If the purpose of this test is to check the behavior of anonymous comments, why should it change if we no longer allow replies? Or if we no longer require users for posting comments?</p>

<p>The magic of matchers is exactly here. You create a new matcher to check specifically the aspect your test cares about and <em>boom</em>, you're decoupled!</p>

<p><div><script src='https://gist.github.com/1737631.js?file=beautiful_and_dry.rb'></script>
<noscript><pre><code>commentor.should_receive(:add).with(anonymous_comment)</code></pre></noscript></div>
</p>

<p>This simple change makes your tests DRY and cool.</p>

<p>Happy testing!</p>

<p>Your should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed or <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Bitching: Do Self-Agile]]></title>
    <link href="http://www.codelord.net/2012/01/28/stop-bitching-do-self-agile/"/>
    <updated>2012-01-28T14:48:17+02:00</updated>
    <id>http://www.codelord.net/2012/01/28/stop-bitching-do-self-agile</id>
    <content type="html"><![CDATA[<p>Continuing on this series of the <a href="/category/autonomouscraftsmanshipcore/">Autonomous Craftsmanship Core</a> we now reach the methodology problem.</p>

<h3>“I want to do agile/craftsmanship/etc.”</h3>

<p>The key is basically to put the rest of your team aside and focus on how you can do things like you think they should be done. You want to do "agile"? Open the manifesto, read the values, and think on how you can change your own process in order to further yourself the direction you want to get.</p>

<h3>Development Practices</h3>

<p>This one deserves a post of its own, but luckily for us I've <a href="/2011/11/28/stop-bitching-write-those-damn-tests/">already</a> <a href="/2011/12/18/stop-bitching-use-the-tools-you-want/">written</a> <a href="/2011/12/30/stop-bitching-it-doesnt-always-take-two-to-pair/">it</a>! You don't need permission to write tests, use the right tools, and just coding in an awesome manner.</p>

<h3>Your own mini iterations, planning and retrospectives</h3>

<p>I think a big part of becoming a better developer is looking at how we work, analyze it, decide where we need practicing and then getting better at it, deliberately. Here are some examples from my own development process.</p>

<h4>Pomodoros</h4>

<p>I love pair programming. Love it. Love it so much, I find it hard to be productive without a pair when coding. I find that the crazy simple <a href="http://www.pomodorotechnique.com/">Pomodoro technique</a> is some kind of magic makes-me-focus-real-good drug. Anytime I'm doing tasks on my own I set up my little timer and burn down the todo list. Using pomodoros allows me to keep track of my time, focus, see how good are my estimations and waste less time on reddit. You don't need anyone else on your team to "allow" you to do pomodoros. Just do it, and see magic happening.</p>

<h4>Goals and Retrospectives</h4>

<p>Just like in an agile team we plan sprints, have retrospectives and set goals, I do the same for myself, both at work and for my personal time. Every week I do a retrospective of the past week, think what I did wrong and what I like. I have monthly and weekly goals. I've got recurring tasks in OmniFocus to review my work. I write the reviews in Evernote and then create new goals and add them to OmniFocus. That way every week and month I can go over the last few weeks and see how I'm doing. For example, I can set goals for finishing a book, write some blog posts, communicate better at work, etc.</p>

<h3>It's up to you</h3>

<p>Uncle Bob Martin said it's not your boss's responsibility to make sure you learn and become better, it's yours. Once you realize this, stop waiting for things to get better by themselves and step up you can actively become better. I was surprised how many of these aspects coincide with what Seth Godin talks about in <a href="http://www.amazon.com/gp/product/1591843162/ref=as_li_ss_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1591843162">Linchpin</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=1591843162" style="width: 0; height: 0; display: none; border: none !important;"/>. You have no excuses not to be doing better things. It's you're responsibility, so <strong>stop bitching and do awesome work.</strong></p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed or <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Bitching: Use the Tools You Want]]></title>
    <link href="http://www.codelord.net/2011/12/18/stop-bitching-use-the-tools-you-want/"/>
    <updated>2011-12-18T23:52:15+02:00</updated>
    <id>http://www.codelord.net/2011/12/18/stop-bitching-use-the-tools-you-want</id>
    <content type="html"><![CDATA[<p>Continuing on the thread of the <a href="/category/autonomouscraftsmanshipcore/">Autonomous Craftsmanship Core</a>, we reach another problem: "they" just won't let you use the right tool, or in the right way. As I've said in the <a href="/2011/11/12/stop-bitching-the-autonomous-craftsmanship-core/">previous</a> <a href="/2011/11/28/stop-bitching-write-those-damn-tests/">posts</a> if anything is <em>so</em> bad you can't work with it - leave; otherwise, you gotta learn how to make do.</p>

<p>A <a href="http://www.amazon.com/gp/product/020161622X/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=020161622X">pragmatic programmer</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=020161622X" style="width: 0; height: 0; display: none; border: none !important;"> uses the right tool for the job. We all know that if you have a hammer, every problem looks like a nail. In this post I'm talking about the situation where you have an awesome toolbox right <em>there</em> and yet they're forcing you to unscrew something with your pinky's nail. Excruciating to your brain.</p>

<p>The thing is, a lot of the times you can just use the right tools and the hell with everyone else. Yes, you can't just write code in whatever programming language you want, but in a lot of other situations, you can do what you want to. I think this is best shown with a few examples:</p>

<h3>"Don't commit too much. Say once a day"</h3>

<p>That's a real quote a friend's boss told him. Turns out committing multiple times a day is too messy. Most programmers might just sulk and do as they're told, but with today's technology you're no longer bound to these stupid rules. Your team uses subversion? So what! You can use Git locally, do whatever you like, and just push once a day everything via <a href="http://trac.parrot.org/parrot/wiki/git-svn-tutorial">git-svn</a>. Same solutions are available for just about any VCS combination you can think of! I've done this several times working on projects with a VCS I didn't want to mess with.</p>

<h3>"We can't have a CI server"</h3>

<p>Why would someone be against that? Maybe your company doesn't want to allocate a new server for such a "useless" thing, or maybe the system admins don't have time for your little "developer toys." Lucky for everyone, it's no longer the case that you need complex setup for such stuff. It's just a matter of looking around. For example, if you're doing open source you just need to give <a href="http://travis-ci.org/">Travis</a> a look and see you're suddenly all set. On the other hand if you're code isn't open sourced setting up a local <a href="http://jenkins-ci.org/">Jenkins</a> server is <em>so so</em> easy. You just double click a file and you've got it running. If your build isn't too CPU hogging, you can run it on your box! And I'm almost certain you can find some server with some spare cycles to install it on.</p>

<h3>Autonomous Craftsmen Make Do</h3>

<p><img src="/images/posts_images/macgyver.jpg" width="300" height="200"></p>

<p>That sums it up. A craftsman's gotta do what a craftsman's gotta do.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
</feed>
