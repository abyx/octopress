<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Code Dump]]></title>
  <link href="http://www.codelord.net/atom.xml" rel="self"/>
  <link href="http://www.codelord.net/"/>
  <updated>2012-03-27T07:04:34+02:00</updated>
  <id>http://www.codelord.net/</id>
  <author>
    <name><![CDATA[Aviv Ben-Yosef]]></name>
    <email><![CDATA[aviv.by+blog@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Slides from the "How BillGuard does MongoDB" Talk]]></title>
    <link href="http://www.codelord.net/2012/03/07/slides-from-the-how-billguard-does-mongodb-talk/"/>
    <updated>2012-03-07T22:51:08+02:00</updated>
    <id>http://www.codelord.net/2012/03/07/slides-from-the-how-billguard-does-mongodb-talk</id>
    <content type="html"><![CDATA[<p>Earlier today <a href="http://twitter.com/davidbrai">David Brailovsky</a> and I gave a talk at the <a href="http://meetup.com/mongo-il/">Israeli MongoDB meetup</a>. Below you can find the slides.</p>

<script src="http://speakerdeck.com/embed/4f57b39faaef0c001f001048.js"></script>


<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed or <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes from the Agile Practitioners 2012 Improving Your TDD Workshop]]></title>
    <link href="http://www.codelord.net/2012/03/01/notes-from-the-agile-practitioners-2012-improving-your-tdd-workshop/"/>
    <updated>2012-03-01T08:01:16+02:00</updated>
    <id>http://www.codelord.net/2012/03/01/notes-from-the-agile-practitioners-2012-improving-your-tdd-workshop</id>
    <content type="html"><![CDATA[<blockquote><p>If you write a test and it passes, the question is if the previous step was too big.<br/>The DRY principle doesn&#8217;t talk about code, but knowledge.<br/>Clever is never something to be proud of in your code.</p><footer><strong>Corey Haines</strong> <cite>Improving Your TDD</cite></footer></blockquote>


<p>A couple of days after <a href="http://www.codelord.net/2012/02/28/notes-from-the-israeli-software-craftsmanship-group-code-retreat/">attending the code retreat</a> facilitated by him, I was fortunate to attend Corey Haines&#8217;s “<a href="http://agilepractitioners2012.com/conference-program/corey-haines-improving-your-tdd/">Improving Your TDD</a>” workshop at the <a href="http://agilepractitioners2012.com/">Agile Practitioners 2012</a> conference. These are some of my notes from the day.</p>

<p>The workshop was intended at coders familiar with TDD and not introductory. I was very interested to see how in-depth TDD training looks, and also meet other coders from Israel that have been doing TDD for a few years. It was quite awesome to sit in a room where everyone felt comfortable with TDD and it wasn&#8217;t this new and hard thing. When the group shares this &#8220;advanced&#8221; technique, discussion can suddenly level up and we could all dive in to the nitty gritty stuff.</p>

<p>During the day, Corey walked us through pretty much taking TDD apart and putting it back together. We started from the history of TDD and its predecessors (manual verification, test after, test first, etc.).</p>

<p>The exercises throughout the day (that I especially enjoyed since I was pairing with <a href="http://twitter.com/theyonibomber">@theyonibomber</a>, my original pair as we were learning TDD together back in 2006) had this beautiful flow of making you smack right into a problem in the way most people do TDD.</p>

<p>We discussed having the tests drive an implementation that we knew we did not want (like sorting easily become bubble sort) and how the (relatively new) <a href="http://cleancoder.posterous.com/the-transformation-priority-premise">Transformation Priority Premise</a> by Uncle Bob can help solve this.</p>

<p>We then took another introspective look at our TDD process (aided by an exercise once more) that made us face the problem of &#8220;flailing&#8221; and &#8220;sitting in red&#8221; - basically the problem of trying to take a step too big in the next test and so falling off the good fast rhythm of &#8221;<a href="http://programmingtour.blogspot.com/2009/03/time-to-green-graphs-with-gary.html">time to green</a>&#8221;.</p>

<p>We had a long discussion about these problems and how they are directly connected to the way we pick the next test. We all know that the next test should be the &#8220;simplest thing&#8221;, but how exactly do we define simple?</p>

<p>I love having these discussions that jolt me and make me rethinks stuff I&#8217;ve long ago stopped paying attention to. Developer introspection is a thing of beauty and much power (Kent Beck tells that he wrote his incredible <a href="http://www.amazon.com/gp/product/013476904X/ref=as_li_ss_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=013476904X">Smalltalk Best Practice Patterns</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=013476904X" style="width: 0; height: 0; display: none; border: none !important;"/> and <a href="http://www.amazon.com/gp/product/0321413091/ref=as_li_ss_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321413091">Implementation Patterns</a> <img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321413091" style="width: 0; height: 0; display: none; border: none !important;"/>  books by simply stopping whenever he was about to type some code and have an explanation as to why he picked to do it that way).</p>

<p>Corey even did a live demo of his TDD style and programming by wishful thinking. It was very interesting, but as all live demos go he had some trouble along the way. Workshop aside, it is not trivial for someone giving a training to admit a mistake done, and Corey gracefully handled the situation.</p>

<p>All in all, the day was a very productive one and it still has me chewing on some of the lessons we learned. It&#8217;s fun realizing again that there&#8217;s no limit to how much one can sharpen a specific skill. Hat off to Corey and the conference organizers for making this happen!</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed or <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes from the Israeli Software Craftsmanship Group Code Retreat]]></title>
    <link href="http://www.codelord.net/2012/02/28/notes-from-the-israeli-software-craftsmanship-group-code-retreat/"/>
    <updated>2012-02-28T22:52:47+02:00</updated>
    <id>http://www.codelord.net/2012/02/28/notes-from-the-israeli-software-craftsmanship-group-code-retreat</id>
    <content type="html"><![CDATA[<p>A month ago I had the great pleasure of participating in a <a href="http://coderetreat.org/about">Code Retreat</a> here in Israel, which was facilitated by the amazing <a href="http://www.coreyhaines.com/">Corey Haines</a>. The event was so awesome and fun that I just put together a few tidbits that I think are worth sharing.</p>

<p>This was actually the third code retreat that I took part in, but funny enough the first retreat where I was a plain participant. I&#8217;ve facilitated two code retreats previously, one at the <a href="http://globalday.coderetreat.org/">Global Day of Code Retreat 2011</a>, and one internal retreat at the <a href="http://en.wikipedia.org/wiki/Israel_Defense_Forces">IDF</a> unit I used to serve in.</p>

<p>I wasn&#8217;t sure going to a third retreat would provide new take-aways, but it sure did!</p>

<p>The first thing that was different from previous retreats was that Corey shared his views on coding. I was already familiar with most of the ideas that he mentioned, but he has a way of making ideas seem simpler that I originally thought, which is very powerful. I also loved seeing how other developers less familiar with these concepts reacted to them.</p>

<p>I was surprised the problem can still be interesting after a couple dozen attempts. This is something I never thought I&#8217;d see. I&#8217;ve seen the code retreat problem (<a href="http://en.wikipedia.org/wiki/Conway's_Game_of_Life">Conway&#8217;s Game of Life</a>) solved a few dozen times previously, and wasn&#8217;t sure I&#8217;d still get a lot out of doing it a few times again this retreat. To my astonishment, every pair I worked with in the retreat brought with him new ideas and considerations, and Corey had us focus on different aspects of programming in each session (there were 5 sessions).</p>

<p>I&#8217;m amazed that we could write the little function that checks whether two cells are neighbors in so many ways and still think hard about it. In one of the sessions, my pair, Elad Sofer, and I were debating the cleanliness of using euclidean distance for this back and force. Corey stood and listened to us talking, though we were speaking Hebrew and he couldn&#8217;t get too much out of it. When I asked him if he wanted us to switch to English, he had this Neo moment and said &#8220;I think I understand what you&#8217;re talking about&#8221; and a minute later he just chimed in and helped us point out the part of the code that wasn&#8217;t fitting in. Such a discussion over 2 lines of code - FUN!</p>

<p>In general, I loved seeing the spark in people&#8217;s eyes and the full power of passionate developers, talking, discussing and caring about their code. As someone who cares about each and every character in source files, I had a blast being around the passionate people, all bathing in the glory of the joy of programming.</p>

<p>Putting limitations on our code as we were solving the same problem kept making it appear as a total different problem. The things you can do when you&#8217;re strictly adhering to the 4 rules of simple design are so different of those that appear when you and your pair aren&#8217;t allowed to speak and just communicate via the code and the tests (no comments allowed! (which is always a good rule)).</p>

<p>Another reason I had a blast was that because, to be honest, I picked the pairs I really wanted to work with, having only 5 precious sessions to work with people I never get to work with regularly (though given 5 more sessions, I would have liked to pair with a few more of the people who attended). Working only with people that I knew were awesome, though not necessarily worked with before was a great boost. My awesome pairs were <a href="https://twitter.com/#!/alonhorev">alonhorev</a>, <a href="https://twitter.com/#!/avihut">avihut</a>, <a href="https://twitter.com/#!/yonbergman">yonbergman</a>, <a href="https://twitter.com/#!/pembleton">pembleton</a> and <a href="https://twitter.com/#!/eladsof">eladsof</a>.</p>

<p>We did TDD in all the sessions, but it was fun sometimes working with people out of their comfort zone, seeing how they react and how I had to be clearer. Sometimes it was just a matter of working in an editor they&#8217;re less familiar with, and sometimes I had to teach Ruby while we were at it. Having to formalize in words every thing you do has the power of making you aware of a lot of the little decisions you usually make unconsciously, which is always a great thing. And I loved picking up little tricks I didn&#8217;t know from my pairs.</p>

<p>All in all, the retreat once again proved out to be an awesome opportunity to focus on the fact that we&#8217;re all doing this because we love coding, and reminding us that it&#8217;s fun and that we can always learn and become better at it.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed or <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extend Your Toolbox: Custom Matchers]]></title>
    <link href="http://www.codelord.net/2012/02/04/extend-your-toolbox-custom-matchers/"/>
    <updated>2012-02-04T14:53:41+02:00</updated>
    <id>http://www.codelord.net/2012/02/04/extend-your-toolbox-custom-matchers</id>
    <content type="html"><![CDATA[<p>I&#8217;d like to point out a really nice testing practice that I&#8217;ve been loving more and more lately.</p>

<p>Just about every mature testing framework out there supports the concept of custom matchers, which provide us with the ability to define our very own assertions seamlessly into the tests. Even though this ability is quite old, we don&#8217;t see it used too often and I think that&#8217;s a shame. I&#8217;ve seen this practice heavily used in the mind expanding <a href="http://www.amazon.com/gp/product/0321503627?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=shr&amp;camp=213733&amp;creative=393185&amp;creativeASIN=0321503627">GOOS</a> book and just now am starting to realize its awesomeness.</p>

<p>Note: examples in this post are shown in Ruby using <a href="https://github.com/dchelimsky/rspec/wiki/Custom-Matchers">RSpec&#8217;s matchers</a> but the concept is pretty much identical (as can be seen for example in Java&#8217;s <a href="http://code.google.com/p/hamcrest/wiki/Tutorial">Hamcrest Matchers</a>).</p>

<h3>Matchers 101</h3>

<p>Creating your own matcher usually means creating a Matcher class that performs the assertions, supplies human readable error messages and a nice constructor.</p>

<p>Here&#8217;s an example from the <a href="https://github.com/dchelimsky/rspec/wiki/Custom-Matchers">RSpec documentation</a>:</p>

<div><script src='https://gist.github.com/1737631.js?file=rspec_matcher.rb'></script>
<noscript><pre><code>RSpec::Matchers.define :be_a_multiple_of do |expected|
  match do |actual|
    actual % expected == 0
  end
end</code></pre></noscript></div>


<h3>Matchers increase readability and intent</h3>

<p>As you should know, one of the <a href="http://c2.com/cgi/wiki?XpSimplicityRules">most important rules for design</a> is <em>Reveals Intent</em>. Take a quick look here, which way do you think reveals more intent?</p>

<div><script src='https://gist.github.com/1737631.js?file=intent.rb'></script>
<noscript><pre><code># This
response['X-Runtime'].should =~ /[\d\.]+/

# .. or this?
response['X-Runtime'].should be_a_number</code></pre></noscript></div>


<p>Also, which error message do you prefer? &#8220;expected false to be true&#8221; or something along the lines of &#8220;expected comment to be anonymous&#8221;?</p>

<h3>Matchers create robust tests</h3>

<p>The most important advantage of all is how using matchers easily allows you to steer away from fragile tests which are the bane of a lot of testing efforts.
The mark of good tests is that a change in your code doesn&#8217;t require you to perform changes in multiple tests that don&#8217;t really care for the change.
Take this code for example:</p>

<div><script src='https://gist.github.com/1737631.js?file=sucky_non_dry.rb'></script>
<noscript><pre><code>expected_comment = Comment.new(anonymous: true, user: &quot;the dude&quot;, reply_to: nil)
commentor.should_receive(:add).with(expected_comment)</code></pre></noscript></div>


<p>This might seem like a standard test, but that&#8217;s not really the case. A test should assert for a single piece of knowledge, and this test actually checks several. If the purpose of this test is to check the behavior of anonymous comments, why should it change if we no longer allow replies? Or if we no longer require users for posting comments?</p>

<p>The magic of matchers is exactly here. You create a new matcher to check specifically the aspect your test cares about and <em>boom</em>, you&#8217;re decoupled!</p>

<div><script src='https://gist.github.com/1737631.js?file=beautiful_and_dry.rb'></script>
<noscript><pre><code>commentor.should_receive(:add).with(anonymous_comment)</code></pre></noscript></div>


<p>This simple change makes your tests DRY and cool.</p>

<p>Happy testing!</p>

<p>Your should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed or <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Bitching: Do Self-Agile]]></title>
    <link href="http://www.codelord.net/2012/01/28/stop-bitching-do-self-agile/"/>
    <updated>2012-01-28T14:48:17+02:00</updated>
    <id>http://www.codelord.net/2012/01/28/stop-bitching-do-self-agile</id>
    <content type="html"><![CDATA[<p>Continuing on this series of the <a href="http://www.codelord.net/category/autonomouscraftsmanshipcore/">Autonomous Craftsmanship Core</a> we now reach the methodology problem.</p>

<h3>“I want to do agile/craftsmanship/etc.”</h3>

<p>The key is basically to put the rest of your team aside and focus on how you can do things like you think they should be done. You want to do &#8220;agile&#8221;? Open the manifesto, read the values, and think on how you can change your own process in order to further yourself the direction you want to get.</p>

<h3>Development Practices</h3>

<p>This one deserves a post of its own, but luckily for us I&#8217;ve <a href="http://www.codelord.net/2011/11/28/stop-bitching-write-those-damn-tests/">already</a> <a href="http://www.codelord.net/2011/12/18/stop-bitching-use-the-tools-you-want/">written</a> <a href="http://www.codelord.net/2011/12/30/stop-bitching-it-doesnt-always-take-two-to-pair/">it</a>! You don&#8217;t need permission to write tests, use the right tools, and just coding in an awesome manner.</p>

<h3>Your own mini iterations, planning and retrospectives</h3>

<p>I think a big part of becoming a better developer is looking at how we work, analyze it, decide where we need practicing and then getting better at it, deliberately. Here are some examples from my own development process.</p>

<h4>Pomodoros</h4>

<p>I love pair programming. Love it. Love it so much, I find it hard to be productive without a pair when coding. I find that the crazy simple <a href="http://www.pomodorotechnique.com/">Pomodoro technique</a> is some kind of magic makes-me-focus-real-good drug. Anytime I&#8217;m doing tasks on my own I set up my little timer and burn down the todo list. Using pomodoros allows me to keep track of my time, focus, see how good are my estimations and waste less time on reddit. You don&#8217;t need anyone else on your team to &#8220;allow&#8221; you to do pomodoros. Just do it, and see magic happening.</p>

<h4>Goals and Retrospectives</h4>

<p>Just like in an agile team we plan sprints, have retrospectives and set goals, I do the same for myself, both at work and for my personal time. Every week I do a retrospective of the past week, think what I did wrong and what I like. I have monthly and weekly goals. I&#8217;ve got recurring tasks in OmniFocus to review my work. I write the reviews in Evernote and then create new goals and add them to OmniFocus. That way every week and month I can go over the last few weeks and see how I&#8217;m doing. For example, I can set goals for finishing a book, write some blog posts, communicate better at work, etc.</p>

<h3>It&#8217;s up to you</h3>

<p>Uncle Bob Martin said it&#8217;s not your boss&#8217;s responsibility to make sure you learn and become better, it&#8217;s yours. Once you realize this, stop waiting for things to get better by themselves and step up you can actively become better. I was surprised how many of these aspects coincide with what Seth Godin talks about in <a href="http://www.amazon.com/gp/product/1591843162/ref=as_li_ss_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1591843162">Linchpin</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=1591843162" style="width: 0; height: 0; display: none; border: none !important;"/>. You have no excuses not to be doing better things. It&#8217;s you&#8217;re responsibility, so <strong>stop bitching and do awesome work.</strong></p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed or <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking Back on 18 months of Testing and TDD at a Startup]]></title>
    <link href="http://www.codelord.net/2012/01/06/looking-back-on-18-months-of-testing-and-tdd-at-a-startup/"/>
    <updated>2012-01-06T22:34:25+02:00</updated>
    <id>http://www.codelord.net/2012/01/06/looking-back-on-18-months-of-testing-and-tdd-at-a-startup</id>
    <content type="html"><![CDATA[<p>As we&#8217;re approaching a year and half here at <a href="https://www.billguard.com">BillGuard</a>, I&#8217;ve started thinking back a bit about our testing habits and how well that&#8217;s turned out.</p>

<p>I&#8217;ve seen a lot of posts about testing in startups, some saying startups shouldn&#8217;t bother to test because they&#8217;ll have to change the whole damn thing 5 minutes after they&#8217;re done, others claim testing is the only reason they were able to keep working. Here are some of my thoughts looking back.</p>

<h3>Our Background</h3>

<p>When we started, only two of us had a test-infected background out of the five technical guys, me being big on <a href="http://www.amazon.com/gp/product/0321146530/ref=as_li_ss_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321146530">TDD</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321146530" style="width: 0; height: 0; display: none; border: none !important;">. Two other developers never wrote tests before. We agreed that tests were important, but that&#8217;s about it. I set up a continuous integration server and with that we were off. With time, the habit of writing tests spread out among the team. Some are TDD passionate, some write tests after the fact, but we generally all believe that tests should be written extensively.</p>

<p><img src="http://www.codelord.net/images/posts_images/test_my_code.png" width="240" height="300"></p>

<h3>Not everything is worth testing</h3>

<p>We&#8217;ve seen several quite rapid changes to our UI. Having less tests in this area makes sense. We rely on QA for making sure all buttons are displayed etc. To make this clear: we have no selenium-like tests for UI components but have tests for most logic being done by the UI. I think this is generally a good practice, since having to maintain selenium tests would be hard when you throw things around a lot and change flows. Some basic automated sanity tests pretty much does it.</p>

<h3>Everyone learned to love tests</h3>

<p>I love seeing other guys in the team delete a line of code to see which test breaks and understand why it&#8217;s there. Even more I love the frowning face when no tests break. This addiction to tests shows how much value the team&#8217;s getting out of having solid tests, hands down. No need to stress this further I believe.</p>

<h3>Tests save our asses repeatedly</h3>

<p>Having an extensive suite of tests allows us to make rapid changes to our code base, as is needed in most startups, and rely on the solid tests to tell us whether we&#8217;ve screwed something up. All the code that has anything whatsoever to do with sensitive and important information is heavily tested which is a huge bonus and a necessity in our line of business (personal finance protection).</p>

<h3>TDD is just magical with complex algorithms</h3>

<p>We have quite a few complex algorithms that require multiple entities and ideas to perform. I find that the parts we&#8217;re most satisfied with maintainability-wise are the heavily TDD-ed algorithms we&#8217;ve got. Being written with rigorous TDD gives us so many advantages:</p>

<ul>
<li>This critical code usually has a lot less defects.</li>
<li>The code is a lot more readable, well decomposed and allows for easy changing once we find out a need for tweaking the algorithms.</li>
<li>Working in TDD magically forces us to form our problem domain better, making us have a language of our own in talking about the problem. This happens less naturally in other forms of working on algorithms.</li>
</ul>


<h3>Summing our testing experiences</h3>

<p>All in all, I think the whole team would agree that dedicating time to writing thorough tests is proving itself valuable and because of that people are writing more and more tests without any of us ever stopping and saying &#8220;we should write tests&#8221; (well, I swear I didn&#8217;t do it too much). It happens naturally when people get the value out of it. It&#8217;s fun seeing how today BillGuard has become a company that organically values testing so much I don&#8217;t even feel a great need to stress it to new people because they&#8217;ll quickly see there&#8217;s no real other way. We&#8217;re far from being the poster children of <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_ss_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0132350882">Clean Code</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0132350882" style="width: 0; height: 0; display: none; border: none !important;">, but I&#8217;ve got my fingers crossed.</p>

<p>If you&#8217;re interested in accomplishing the same at your work, you might find <a href="http://www.codelord.net/2011/11/28/stop-bitching-write-those-damn-tests/">this recent post</a> of mine of some help.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed or <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Bitching: It Doesn't Always Take Two to Pair]]></title>
    <link href="http://www.codelord.net/2011/12/30/stop-bitching-it-doesnt-always-take-two-to-pair/"/>
    <updated>2011-12-30T18:02:55+02:00</updated>
    <id>http://www.codelord.net/2011/12/30/stop-bitching-it-doesnt-always-take-two-to-pair</id>
    <content type="html"><![CDATA[<p>Pushing forward with the <a href="http://www.codelord.net/category/autonomouscraftsmanshipcore/">Autonomous Craftsmanship Core series</a>. This week on our plate: How can you force pairing down the throat of your team even if they&#8217;re not really into it?</p>

<p>I&#8217;ve already touched on this subject a few times before, especially since it&#8217;s one I find really important and had to handle a few times before.
Pair programming feels to me like the best technique currently known to the software industry for making a team highly productive and have global code ownership. It&#8217;s one of those things that didn&#8217;t click right away when reading <a href="http://www.amazon.com/gp/product/0321278658/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321278658">Extreme Programming Explained</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321278658" style="width: 0; height: 0; display: none; border: none !important;">, but man did I get it wrong.</p>

<p>I&#8217;ve loved pairing from the moment I started doing it and ever since I find it hard doing hard work without a pair by my side. The problem is that most of the software shops around are still not pairing regularly, making it hard for a pairing junky like me to have fun.</p>

<p>So, how can we stop bitching about our team not pairing and actually get shit done with a pair? As opposed to the previous posts on the Autonomous Craftsmanship Core, this is not something one can do alone, and so is a bit harder to work around.</p>

<p>Basically, <strong>not calling it pair programming</strong>. It might be a bit tricky socially, but it&#8217;s worth it. Some real examples:</p>

<h3>Can you help me out?</h3>

<p>If I have a short task (ideally - no more than 30-45 minutes) that I want some help with, I just find someone on my team and ask for some help. Hopefully, you&#8217;re not in a team where asking for help sounds problematic. Then, once you&#8217;re both on your computer and working on the problem - you&#8217;re pairing. That was easy, wasn&#8217;t it? Do it enough times (without looking like an idiot that always needs help) and your mates get acquainted to the idea fast.</p>

<h3>Volunteer to help people</h3>

<p>I love walking around the team and seeing what people are doing. Every once in a while, simply walking by someone and asking how are things going might trigger a &#8220;Take a look at this&#8221; response, and you can help a fellow coder get unstuck. I used to do this even outside of my team. Spending 15 minutes with someone to help him solve a problem and share some knowledge and technique in the meantime is just awesome.</p>

<h3>Review code to be in the loop</h3>

<p>I try and read most of the commits being done to projects I&#8217;m involved with. It has many advantages, and one of them is that I&#8217;m familiar with most of what&#8217;s going on around me. That means I might find little problems, ideas and changes that might help my team. I then just go to the person that made the changes and share my ideas. Sometimes that would drag us both into a short pairing session.</p>

<p>These are basic techniques that I&#8217;ve found helpful several times. Even people that have never heard about pairing start liking it (if they really find you helpful and not annoying, of course). I just love seeing how after a few weeks, people come and ask for help if you&#8217;re not around, and how slowly the idea of doing some tasks together becomes obvious. I don&#8217;t have to have them call it pairing, and it doesn&#8217;t have to be 100% of the time. The bottom line is that good practices stick, even unconsciously.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed or <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Bitching: Use the Tools You Want]]></title>
    <link href="http://www.codelord.net/2011/12/18/stop-bitching-use-the-tools-you-want/"/>
    <updated>2011-12-18T23:52:15+02:00</updated>
    <id>http://www.codelord.net/2011/12/18/stop-bitching-use-the-tools-you-want</id>
    <content type="html"><![CDATA[<p>Continuing on the thread of the <a href="http://www.codelord.net/category/autonomouscraftsmanshipcore/">Autonomous Craftsmanship Core</a>, we reach another problem: &#8220;they&#8221; just won&#8217;t let you use the right tool, or in the right way. As I&#8217;ve said in the <a href="http://www.codelord.net/2011/11/12/stop-bitching-the-autonomous-craftsmanship-core/">previous</a> <a href="http://www.codelord.net/2011/11/28/stop-bitching-write-those-damn-tests/">posts</a> if anything is <em>so</em> bad you can&#8217;t work with it - leave; otherwise, you gotta learn how to make do.</p>

<p>A <a href="http://www.amazon.com/gp/product/020161622X/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=020161622X">pragmatic programmer</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=020161622X" style="width: 0; height: 0; display: none; border: none !important;"> uses the right tool for the job. We all know that if you have a hammer, every problem looks like a nail. In this post I&#8217;m talking about the situation where you have an awesome toolbox right <em>there</em> and yet they&#8217;re forcing you to unscrew something with your pinky&#8217;s nail. Excruciating to your brain.</p>

<p>The thing is, a lot of the times you can just use the right tools and the hell with everyone else. Yes, you can&#8217;t just write code in whatever programming language you want, but in a lot of other situations, you can do what you want to. I think this is best shown with a few examples:</p>

<h3>&#8220;Don&#8217;t commit too much. Say once a day&#8221;</h3>

<p>That&#8217;s a real quote a friend&#8217;s boss told him. Turns out committing multiple times a day is too messy. Most programmers might just sulk and do as they&#8217;re told, but with today&#8217;s technology you&#8217;re no longer bound to these stupid rules. Your team uses subversion? So what! You can use Git locally, do whatever you like, and just push once a day everything via <a href="http://trac.parrot.org/parrot/wiki/git-svn-tutorial">git-svn</a>. Same solutions are available for just about any VCS combination you can think of! I&#8217;ve done this several times working on projects with a VCS I didn&#8217;t want to mess with.</p>

<h3>&#8220;We can&#8217;t have a CI server&#8221;</h3>

<p>Why would someone be against that? Maybe your company doesn&#8217;t want to allocate a new server for such a &#8220;useless&#8221; thing, or maybe the system admins don&#8217;t have time for your little &#8220;developer toys.&#8221; Lucky for everyone, it&#8217;s no longer the case that you need complex setup for such stuff. It&#8217;s just a matter of looking around. For example, if you&#8217;re doing open source you just need to give <a href="http://travis-ci.org/">Travis</a> a look and see you&#8217;re suddenly all set. On the other hand if you&#8217;re code isn&#8217;t open sourced setting up a local <a href="http://jenkins-ci.org/">Jenkins</a> server is <em>so so</em> easy. You just double click a file and you&#8217;ve got it running. If your build isn&#8217;t too CPU hogging, you can run it on your box! And I&#8217;m almost certain you can find some server with some spare cycles to install it on.</p>

<h3>Autonomous Craftsmen Make Do</h3>

<p><img src="http://www.codelord.net/images/posts_images/macgyver.jpg" width="300" height="200"></p>

<p>That sums it up. A craftsman&#8217;s gotta do what a craftsman&#8217;s gotta do.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Your Brain Cares About Code Style]]></title>
    <link href="http://www.codelord.net/2011/12/10/your-brain-cares-about-code-style/"/>
    <updated>2011-12-10T20:38:18+02:00</updated>
    <id>http://www.codelord.net/2011/12/10/your-brain-cares-about-code-style</id>
    <content type="html"><![CDATA[<p>My first team had (among many other great attributes) the custom of strictly following a style guide. It was followed so religiously, I&#8217;ve yet to come across another place that does so to the same extent. It wasn&#8217;t really written down anywhere, but after a couple of weeks of pairing with the other guys you got it.</p>

<p>What does that mean exactly? It means that we wrote code that looked, to a large extent, like it was written like the same guy. We put 2 blank lines between regions. Members had a specific way of documenting. We even used the same idioms for creating empty lists etc. (Java).</p>

<p>If we paired with someone and saw him indent the code the wrong way, we&#8217;d go all <em>OCD until it was fixed</em>. And it was regarded totally OK. We didn&#8217;t feel like we were nitpicking on each other. It was the way things got done. I even know a guy that would notice extra whitespace at the end of lines (without any IDE help).</p>

<p>Ever since, whenever I see code written with careless indentation and whitespace I feel like the coder who wrote that just doesn&#8217;t care enough for the craft. Yes, <strong>No Whitespace - No Care</strong>!</p>

<h3>What&#8217;s the big deal?</h3>

<p>If code isn&#8217;t written in a consistent style in your team, whenever you come across code with the spacing a bit wrong, the first thing your head&#8217;s going to process is &#8221;<strong>I didn&#8217;t write this.</strong>&#8221; This is a natural feeling, and as we all know coders have a hard to restrain impulse to rewrite any piece of code they didn&#8217;t write. Once all the code looks the same, that feeling isn&#8217;t that hard and you can actually focus on the code itself and have a better sense of ownership. I know, it sounds stupid, but that&#8217;s the way our stupid minds work in.</p>

<p>A big part of the <a href="http://www.amazon.com/gp/product/0321278658/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321278658">Extreme Programming</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321278658" style="width: 0; height: 0; display: none; border: none !important;"> principle Collective Code Ownership is obtained by simply keeping a consistent style. Anything important enough to become a core value of the only methodology that works must be worth the effort to take notice of.</p>

<p>The next time you see code with reckless spacing, change it and let your teammates know. It might be hard at first but the end goal is important - the ability to fluidly read code, without feeling like you&#8217;re wearing someone else&#8217;s shoes.</p>

<p>You should subscribe to my <a href="http://feeds.feedburner.com/TheCodeDump">blog</a> and follow me on <a href="http://twitter.com/avivby">twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Moved My WordPress Blog from Dreamhost to a Free EC2 Instance]]></title>
    <link href="http://www.codelord.net/2011/11/30/how-i-moved-my-wordpress-blog-from-dreamhost-to-a-free-ec2-instance/"/>
    <updated>2011-11-30T23:23:43+02:00</updated>
    <id>http://www.codelord.net/2011/11/30/how-i-moved-my-wordpress-blog-from-dreamhost-to-a-free-ec2-instance</id>
    <content type="html"><![CDATA[<p>Just recently my Dreamhost plan, the one this blog is hosted on, expired and I had to renew it. Seeing the amount of money they took charge me realize that surely I can find something cheaper than >$10/month. After some snooping around I&#8217;ve settled on moving my WordPress blog to EC2. This is my story.</p>

<p><em>Disclaimer: this worked for me. If you lose your blog, too bad. Backup is your friend, my friend. You need some devops-chops to follow along.</em></p>

<p>After being tipped of by a couple of friends, I decided to look into setting up my site on EC2. Basically, my blog is really small (the WordPress export file is about 2MB), and it&#8217;s not like I get tons of traffic. That alone means that for a year now I can use the EC2 free tier, making this blog cost pretty much nothing.</p>

<h3>Initial setup</h3>

<p>First step was to register and AWS account. I created a micro instance, which is enough for most blogs and free for a year. The AMI (image) of the instance I used was Bitnami&#8217;s prebundled WordPress image, which you can read more about <a href="http://bitnami.org/stack/wordpress">here</a>. Do make sure to create your instance on an EBS and not instance store. That means that the data will be persistent. Change the instance&#8217;s security group to allow connections to port 80 (HTTP) and port 22 (SSH) from any IP.</p>

<p>You can assign a static IP to your instance for free! Just allocate a new Elastic IP on the EC2 console and attach it to your instance. Note that Elastic IPs cost nothing while attached, by if they aren&#8217;t attached your bill will start growing (after all, fresh IPs are a rare resource).</p>

<p>So you&#8217;ve got your instance up, eh? You can point your browser to your instance&#8217;s public DNS name, like so http://ec2-something-something.com/wordpress and see the default WordPress hello page. Go to /wordpress/wp-admin to login as admin (the default bitnami user/password are user/bitnami). Here you can start and setup your blog again.</p>

<h3>Importing</h3>

<p>On your original blog, you can use the export utility and then import all your posts and comments to the new machine. Easy as pie. If you have a lot of plugins and configurations, you might want to search for one of the many plugins that do that for you. If you&#8217;re like me and only have a couple of plugins and one theme, installing them manually takes about 3 minutes.</p>

<h3>Moving WordPress to the root of the site</h3>

<p>If you&#8217;d like to move WordPress to the root of your site (/ instead of /wordpress), remove the path from the General settings page and then SSH to the machine. Replace the first two lines of the file /opt/bitnami/apps/wordpress/conf/wordpress.conf with:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='apache'><span class='line'><span class="nb">Alias</span> / <span class="s2">&quot;/opt/bitnami/apps/wordpress/htdocs/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, go to /opt/bitnami/apache2 and do:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo ./bin/apachectl restart
</span></code></pre></td></tr></table></div></figure>


<h3>Gotchas</h3>

<p>Got permalinks? You&#8217;ll need to:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod g+rw /opt/bitnami/apps/wordpress/htdocs/.htaccess
</span></code></pre></td></tr></table></div></figure>


<p>Want to receive email notification for new comments etc.? You&#8217;ll need to do:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install sendmail <span class="o">&amp;&amp;</span> sudo ln -s /usr/sbin/sendmail /usr/bin/sendmail
</span></code></pre></td></tr></table></div></figure>


<p>If you have attachments in any of your posts, you might need to fix the URL after the final move.</p>

<h3>Testing</h3>

<p>Make sure all your links, widgets etc. are working before making the final move. Post something, add a comment.</p>

<h3>Going live</h3>

<p>In the General settings panel, change the URL of the blog to your domain. Go to wherever you were hosted before, find the DNS panel and change the DNS entries for your blog. Danger: This is an &#8220;expert&#8221; step, and if you don&#8217;t know what it means, I recommend grabbing someone with more knowledge. Change the A records for your domain to point at the elastic IP you gave your instance. That&#8217;s it! Wait a bit for DNS propagation and everything should be working!</p>

<h3>Backups</h3>

<p>I found out about the <a href="http://wordpress.org/extend/plugins/wordpress-backup-to-dropbox/">backup to dropbox plugin</a>, which simply uploads all your blog to dropbox! Sweet, awesome and easy for small blogs!</p>

<h3>Costs</h3>

<p>So, using 1 micro instance with an EBS store of 10GB is free for the first year. Given nothing crazy in terms of network, you shouldn&#8217;t be paying at all for the first year, maybe about $1 a month. After that year passes, the instace and EBS store start kicking in. If you&#8217;re in it for the long run, like me, paying for the instance a year in advance costs about $9/month (3 years is like $7), and the EBS store costs $0.1 per GB, meaning $1. That&#8217;s about $10-$8/month, depending on how you pay for the instance. A great save compared to Dreamhost!</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">susbcribe</a> to my feed and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Bitching: Write Those Damn Tests]]></title>
    <link href="http://www.codelord.net/2011/11/28/stop-bitching-write-those-damn-tests/"/>
    <updated>2011-11-28T23:27:09+02:00</updated>
    <id>http://www.codelord.net/2011/11/28/stop-bitching-write-those-damn-tests</id>
    <content type="html"><![CDATA[<p>Diving deeper into the idea of the <a href="http://www.codelord.net/2011/11/12/stop-bitching-the-autonomous-craftsmanship-core/">Autonomous Craftsmanship Core</a>, this time I&#8217;d like to talk about one of the first problems a lot of developers face when wanting to start doing clean code.</p>

<p>You read Uncle Bob&#8217;s <a href="http://www.amazon.com/gp/product/0132350882/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0132350882">Clean Code</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0132350882&camp=217145&creative=399369" style="width: 0; height: 0; display: none; border: none !important;">, or went to a talk and then go all &#8220;Next day at work I&#8217;m gonna write tests!!&#8221; Then you come to work, and you give the &#8220;let&#8217;s write tests man!&#8221; speech to your teammate, and he just yawns, and slowly the rush fades.</p>

<p>Lots have been written before about introducing tests to a team as a grunt, but I&#8217;ll do a quick recap:</p>

<p>You <em>don&#8217;t have to ask anyone</em> in order to start and write some tests. Write that first test. Make it pass. Commit. Not that hard, isn&#8217;t it?</p>

<p>Usually the next problem is that if no one else on your team runs the tests, they will keep breaking. But can you blame your team? You need to make them understand that running the tests will actually get them something.</p>

<p>For example, I&#8217;ve seen that after someone makes a commit that breaks the tests because of a bug, coming over to him and telling him what went wrong and how you found out might make him more interested in the idea of testing. A friend recently told me that he made running tests as simple as a double-click for the developers that don&#8217;t write tests. Once it got <em>that</em> easy, they started running them because everyone likes knowing that what they wrote works.</p>

<p>What if your boss won&#8217;t let you write tests? Frankly, <em>why the fuck should your boss care</em>? Does he also tell you when to use &#8220;while&#8221; instead of &#8220;for&#8221;? I don&#8217;t find things such as these to be something any boss should decide about. As I&#8217;ve said in the first post, if you find yourself in a place so resistant to change, <strong>leave</strong>. If you have to stay, do what you have to do. If they won&#8217;t let you commit your tests to source control or set up a continuous integration machine, there are solutions, which I&#8217;ll discuss on my next post.</p>

<p>In the mean time, focus on writing tests that help your teammates find problems and see how slowly your little tests get more and more traction. It&#8217;ll work, because <strong>Success begets attention!</strong></p>

<p>You should subscribe to my <a href="http://feeds.feedburner.com/TheCodeDump">feed</a> and follow me on <a href="http://twitter.com/avivby">twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop Bitching: the Autonomous Craftsmanship Core]]></title>
    <link href="http://www.codelord.net/2011/11/12/stop-bitching-the-autonomous-craftsmanship-core/"/>
    <updated>2011-11-12T13:42:40+02:00</updated>
    <id>http://www.codelord.net/2011/11/12/stop-bitching-the-autonomous-craftsmanship-core</id>
    <content type="html"><![CDATA[<p>A lot of developers I know keep bitching about how their team isn&#8217;t as passionate as they&#8217;d like it to be, or about their boss not letting them do things like it should be done. They get into this habit and never advance in the right direction because something is holding them back. I know this situation well, I&#8217;m usually <em>one of these</em> guys.</p>

<p>In the spirit of <a href="http://programmingtour.blogspot.com/2010/11/positivember.html">Positivember</a> I&#8217;d like to tell you a secret. You can stop whining and start improving. You don&#8217;t have to wait for all the stars to align. That cliché about changes starting from yourself is actually right.</p>

<p><strong>I&#8217;ve heard almost every complaint in the book:</strong></p>

<p><em>&#8220;My teammates don&#8217;t write tests.&#8221;</em>
<em>&#8220;They won&#8217;t let me have a continuous integration server.&#8221;</em>
<em>&#8220;I can&#8217;t use Git.&#8221;</em>
<em>&#8220;My boss hates it when I make a lot of commits.&#8221;</em>
<em>&#8220;I was told not to write tests.&#8221;</em>
<em>&#8220;We&#8217;re not doing agile development.&#8221;</em>
<em>&#8220;I can&#8217;t do pair programming.&#8221;</em></p>

<p>If everything above applies, or you really have lots of problems like these, <em>just quit</em>. A developer that really cares about these things usually can find a better job easily. But, if it&#8217;s only some of these, remember that no work is perfect. There will always be suboptimal stuff to live with. The trick is not to be all bitter about it, but to actually try and make changes happen, slowly, so you still have fun.</p>

<p>Most if not all of these problems are things you can work around, technologically, mentally or socially. If you just stick to your good ways, you&#8217;ll eventually get some followers too.</p>

<p>Step up and realize that everything can start by you and your habits. An <strong>Autonomous Craftsmanship Core</strong> as I like to call it. Sometimes, you core will seem so awesome from the outside that people will join in on some of your practices. Sometimes it will go unnoticed and you will happily go on programming better and better.</p>

<p>I will blog more on tackling some of the problems I mentioned above, but as a starting point I recommend <a href="http://amzn.to/vHjrXa">Apprenticeship Patterns</a> and <a href="http://amzn.to/t68iqC">Driving Technical Change</a>. These great books help a lot in accepting that fact you should take matters into your own hands, and stop bitching.</p>

<p>You should subscribe to my <a href="http://feeds.feedburner.com/TheCodeDump">feed</a> and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stepping Up: Do the Pre-Commit Skim]]></title>
    <link href="http://www.codelord.net/2011/11/05/stepping-up-do-the-pre-commit-skim/"/>
    <updated>2011-11-05T22:38:24+02:00</updated>
    <id>http://www.codelord.net/2011/11/05/stepping-up-do-the-pre-commit-skim</id>
    <content type="html"><![CDATA[<p>I&#8217;m always looking for the easiest way to make my code better, or to train myself to pay more attention to the quality of the code I produce. My latest find is quite obvious yet so very powerful I had to share. Simply put, it&#8217;s just <em>going over your code once more before a commit</em>.</p>

<p>Every once in a while, I commit code and forget to add a file. Even worse, I sometimes leave around dead code that I really hate. I&#8217;ve found out that simply making a mental note to go over every file I changed before making a commit makes a big difference. It seems like the Boy Scout Rule from <a href="http://amzn.to/sf6KkN">Clean Code</a> is a special case of this rule.</p>

<p>The trick is to simply go over every file you&#8217;ve changed and <strong>look for common pitfalls</strong>:</p>

<p><strong>Unused code</strong> - Are there methods your changes just made obsolete? Maybe a conditional with an &#8220;else&#8221; clause that can no longer happen? Delete code! It&#8217;s the best code you&#8217;ll write today!</p>

<p><strong>Zombie code</strong> - Did you start with something that was too complex and is no longer needed? Often in retrospect you can see how to simplify something and spare your colleagues the <a href="http://www.codelord.net/2011/10/28/fight-zombie-code/">woes of zombie code</a>.</p>

<p><strong>Overdue refactoring</strong> - Look at your changes. Are you pushing a method too far? Maybe making a class too bloated? Maybe it&#8217;s time to for some cleaning.</p>

<p><strong>Do you have a better name for it now?</strong> Sometimes when you start with something you don&#8217;t have a great name for it. After finishing it, you might be able to slap a better name on that class that will make it more obvious to everyone.</p>

<p><strong>Any dangling TODOs?</strong> I hate committing TODOs unintentionally.</p>

<p><strong>Make sure it&#8217;s all coherent in class-level</strong> - Some changes make sense when you&#8217;re knee-deep in a change. But step back and make sure it all still makes sense.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fight Zombie Code]]></title>
    <link href="http://www.codelord.net/2011/10/28/fight-zombie-code/"/>
    <updated>2011-10-28T16:57:27+02:00</updated>
    <id>http://www.codelord.net/2011/10/28/fight-zombie-code</id>
    <content type="html"><![CDATA[<p>If there&#8217;s anything I hate more than dead code, it&#8217;s zombie code. Dead code is code that&#8217;s remained in the system even though it&#8217;s no longer really used.</p>

<p>It might be small, like unused imports, instance variables and methods. It can be whole classes that make up entire features no longer used.</p>

<p>The biggest PITA is when you&#8217;re not really aware of the fact the code&#8217;s dead and unused, sitting there and occupying precious bits, and stumble across it as part of a task, trying to understand how it influences what you want to do next.</p>

<p>Whenever I recognized something that looks like dead code but I&#8217;m not entirely sure, I find it pretty easy to delete it quickly, once I take a look in the version control logs and see when it became no longer in use and why.</p>

<p>Zombie code is code that was never alive, and so couldn&#8217;t really become dead. It&#8217;s the undead code - code that died right when it was committed. Code that never ran or never worked. The are two reasons I hate zombie code more than &#8220;plain&#8221; dead code.</p>

<p><img src="http://www.codelord.net/images/posts_images/test_my_code.png" width="240" height="300"></p>

<p>The first reason is that it simply wastes more of my time. Looking back in version control won&#8217;t help me see the commit in which the code was &#8220;decommissioned&#8221;, it would just appear to always sit there. That means I have to take extra care to verify that it, in fact, never worked.</p>

<p>The second reason is that it&#8217;s plainly someone saying he doesn&#8217;t give a damn. I mean, let&#8217;s put aside TDD. Heck, let&#8217;s put aside unit testing at all. It means the code never even ran the damn thing and saw in his own eyes it did what he claims it did.</p>

<p>Be kind to your teammates. If you&#8217;re not a good enough coder to test it, at least see that it runs <em>once</em> in your own eyes.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TIL: Ruby Classes that Look Callable]]></title>
    <link href="http://www.codelord.net/2011/10/18/til-ruby-classes-that-look-callable/"/>
    <updated>2011-10-18T08:01:07+02:00</updated>
    <id>http://www.codelord.net/2011/10/18/til-ruby-classes-that-look-callable</id>
    <content type="html"><![CDATA[<p>One of the concept I had to get used to moving from Python to Ruby was that regular objects aren&#8217;t callable, and that there was a closed set of objects that can be called. Meaning that where in Python it was possible for any class to implement <strong>call</strong> and so allow us to call it with obj(), Ruby doesn&#8217;t allow this. One of the advantages of that syntax in Python is that each class implements its constructor using this. For example:</p>

<div><script src='https://gist.github.com/1294707.js?file=python_class_is_callable.py'></script>
<noscript><pre><code>class MyClass:
    def __init__(self, value):
        self.value = value

my_class = MyClass(1) # We are calling the class to get
                      # an instance, instead of
                      # MyClass.new(1) in Ruby</code></pre></noscript></div>


<p>This was a nice little trick I liked in Python but quickly got used to living without it. That was until I saw Ruby code that seemed to allow the exact same behavior:</p>

<div><script src='https://gist.github.com/1294707.js?file=ruby_class_looks_callable.rb'></script>
<noscript><pre><code>Integer.class
#=&gt; Class

Integer(1)
#=&gt; 1</code></pre></noscript></div>


<p>How&#8217;s this so? Can we really make classes callable? A quick glance at Integer&#8217;s source code in the Rubinius code reveals that there&#8217;s no magic going on in it, and that it actually has no reference for this method I&#8217;m looking to call. Instead what we&#8217;ll see is that alongside the class definition there&#8217;s also a method definition:</p>

<div><script src='https://gist.github.com/1294707.js?file=integer.rb'></script>
<noscript><pre><code>class Integer
  #...
end

def Integer(value)
  #...
end</code></pre></noscript></div>


<p>So the whole trick is simply to define both. But how exactly does this work? How are names not clashing?</p>

<p>What actually happens is that whenever we define a new class or module, its name is added as a constant that points to the actual class. Similarly, when we define a method at the top level it&#8217;s added as a private method to Object. That means that whenever we type in a name that looks like a constant (starts with a capital letter) without parenthesis, Ruby will search for that constant:</p>

<div><script src='https://gist.github.com/1294707.js?file=const_lookup.rb'></script>
<noscript><pre><code>Object.const_defined? :Integer
#=&gt; true</code></pre></noscript></div>


<p>But when we add parenthesis, Ruby understands that it should seek for a method instead:</p>

<div><script src='https://gist.github.com/1294707.js?file=method_lookup.rb'></script>
<noscript><pre><code>Object.private_method_defined? :Integer
#=&gt; true</code></pre></noscript></div>


<p>This nifty little trick is all it takes for Ruby to allow this nice syntax.</p>

<p>Hope you learned a new thing! In case you want to dig deeper, two great books that really helped me wrap my head around dark corners of Ruby are <a href="http://www.amazon.com/gp/product/0321584104/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321584104">Eloquent Ruby</a> and <a href="http://www.amazon.com/gp/product/1934356476/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1934356476">Metaprogramming Ruby</a>.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Submitting your first patch to Rubinius]]></title>
    <link href="http://www.codelord.net/2011/10/11/submitting-your-first-patch-to-rubinius/"/>
    <updated>2011-10-11T07:02:04+02:00</updated>
    <id>http://www.codelord.net/2011/10/11/submitting-your-first-patch-to-rubinius</id>
    <content type="html"><![CDATA[<p>I always love helping interesting open source projects, and Rubinius is one of those great projects that are very cool to play with. In case you don&#8217;t know it, Rubinius is a Ruby implementation written (almost) entirely in Ruby. Just playing with such a code base is quite interesting and whenever a peek around in the code I learn new stuff about Ruby.</p>

<p>At the moment, the people at Rubinius are working hard on making it compatible with ruby 1.9, and so there are a lot of easy changes that are waiting for you to do and start contributing. I&#8217;d like to show you a quick walk-through of how to find such simple tasks and get started.</p>

<h3>Setup</h3>

<p>Clone the project from the GitHub <a href="https://github.com/rubinius/rubinius">repo</a>. Once that&#8217;s done, to make sure that everything works properly do this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./configure
</span><span class='line'>rake spec
</span></code></pre></td></tr></table></div></figure>


<p>The specs should be all passing on your machine. It will take a few minutes the first time, but afterwards whenever you make small changes it will be faster.</p>

<h3>Finding interesting work</h3>

<p>Of course you can submit whatever patch you find interesting, but in my opinion a quick way to get started is to find incompatibilities with 1.9. Fortunately for you, it&#8217;s pretty easy to find those.</p>

<p>Rubinius, along with the other Ruby implementations, uses mspec in order to have written specs of the language written in Ruby and is checked against that. These specs are similar to RSpec. Among other options, some specs are simply marked as having to pass only on Ruby 1.9 and of these, those that are currently failing are our hunt.</p>

<p>I came up with this command in order to find and execute such 1.9 specs that were last reported by Rubinius developers to be failing:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bin/mspec tag --list fails -tx19 :ci_files
</span></code></pre></td></tr></table></div></figure>


<p>This command will list the RubySpecs that are tagged as failing on Rubinius in 1.9 mode.</p>

<p>You should see plenty (at the time of this writing, over 500) of failing specs. Just pick something that seems easy enough to get started with.</p>

<p>Once you spot a spec that looks interesting you can run it specifically and see the code. For example, if you see an interesting spec for String#squeeze, you can run it with:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bin/mspec -tx19 spec/ruby/core/string/squeeze_spec.rb
</span></code></pre></td></tr></table></div></figure>


<h3>Doing some work</h3>

<p>For example, let&#8217;s look at one of the really simple specs I decided to get passing, you can see the commit <a href="https://github.com/rubinius/rubinius/commit/723fc5ee6c57267c92744b24a100c595375ef39c">here</a>. I wanted to make a simple change to the String#ord method, but only on 1.9 version. The way to do that on Rubinius is that many of the files, say string.rb now have also &#8220;string18.rb&#8221; and &#8220;string19.rb&#8221; that contain the code that differs. In my case, I just made a simple change to the version used on 1.9 by editing the ord method on the string19.rb file (in case the 19 and 18 files don&#8217;t exist yet, you can simply create them like shown <a href="https://github.com/rubinius/rubinius/commit/42fe03c5e6b82b712dcdbdf5875581f854e21af7">here</a>).</p>

<p>After you&#8217;ve made your changes, be sure to run the specs again and see that everything works. Before submitting it, you should make sure to run all specs thoroughly using the command rake spec. If all is well, just do the regular GitHub <a href="http://help.github.com/send-pull-requests/">pull-request dance</a> and off you go!</p>

<p>Further than that, you can include in your pull request another commit that removes the failing tags from the specs you&#8217;ve just fixed. Find the appropriate file and just remove it, as you can see in <a href="https://github.com/rubinius/rubinius/commit/bfde3637a454eade1972a636dd8a1ad05d9fdc57">this commit</a>.</p>

<p>For some more in depth review of how to start contributing to Rubinius, see this <a href="http://rubini.us/2011/10/18/contributing-to-rubinius/">excellent post</a> on the official blog.</p>

<p>You should subscribe to my <a href="http://feeds.feedburner.com/TheCodeDump">feed</a> and follow me on <a href="http://twitter.com/avivby">twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When being idiomatic wears you out]]></title>
    <link href="http://www.codelord.net/2011/08/27/when-being-idiomatic-wears-you-out/"/>
    <updated>2011-08-27T13:25:33+03:00</updated>
    <id>http://www.codelord.net/2011/08/27/when-being-idiomatic-wears-you-out</id>
    <content type="html"><![CDATA[<p>I believe that when learning a new programming language, it&#8217;s really important to learn its idioms and use them. I&#8217;ve written procedural C-like code in Java, and bloated Java-like code in Python, but only once you start using a language &#8220;like it was meant to&#8221; can you really say you&#8217;ve started mastering it. Had I not read <a href="http://www.amazon.com/gp/product/0321356683/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399381&amp;creativeASIN=0321356683">Effective Java</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321356683&camp=217145&creative=399381" style="width: 0; height: 0; display: none; border: none !important;"> I don&#8217;t think I could have ever written a sensible line in this language.</p>

<p>I practically cringe whenever I see someone creating a new list in Java and then adding to it a single element when he just could have used <code>Collections.singletonList(element)</code>. I&#8217;m that kind of a fanatic.</p>

<p>But, lately I&#8217;m getting worn out of being verbose. Yes, you can use the trick above to save a line of code and a lot of typing, but damn it - I just want to say <code>[element]</code>!</p>

<p>Less than a month into BillGuard we realized we don&#8217;t want to do all of our coding in Java and started calling Python code from Java (not in the JVM though, since Jython just doesn&#8217;t seem solid enough). Running away from Java&#8217;s notoriously long idioms, we preferred adding the overhead of having multiple programming languages in one project (which I think justified itself plenty, but it is an overhead).</p>

<p>This solution helped us when doing big stuff we didn&#8217;t want to do in Java, stuff that we&#8217;d represent in a unique class. But the smaller stuff just kept nagging us. We kept finding ourselves writing 10-15 lines of code to do something we thought trivial and then putting a 1-2 lines of comments before it saying what we actually meant in Python. These eventually lead to a lot of extracted methods which are generally good, but rarely would I extract such logic in Python/Ruby - where it would be a single concise line of code.</p>

<p>Lately, we started toying with just saying &#8220;screw the idioms&#8221; and doing what feels right. If that means having a <code>JavaSucksUtils</code> class with methods such as <code>zip()</code> and <code>defaultdict_int()</code> so be it. I think that with time this will lead to using a wholly different language in the JVM mostly, but in the mean time this seems to be a nice transition.</p>

<p>I mean, common:</p>

<div><script src='https://gist.github.com/1175248.js?file='></script>
<noscript><pre><code>// Why write this..
public static &lt;T, V&gt; Map&lt;T, List&lt;V&gt;&gt; defaultdict_list() {
    return new MapMaker().makeComputingMap(new Function&lt;T, List&lt;V&gt;&gt;() {
        @Override public List&lt;V&gt; apply(T unusedCrap) {
            return Lists.newArrayList();
        }
    });
}

# When you just want this (Python)
defaultdict(list)

# Or this (Ruby)
Hash.new {|h,k| h[k] = []}</code></pre></noscript></div>


<p>Now we&#8217;ll have to wait and see where this gets us.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Guest Post: Lookup Tables with Ruby-on-Rails]]></title>
    <link href="http://www.codelord.net/2011/08/09/guest-post-lookup-tables-with-ruby-on-rails/"/>
    <updated>2011-08-09T22:18:07+03:00</updated>
    <id>http://www.codelord.net/2011/08/09/guest-post-lookup-tables-with-ruby-on-rails</id>
    <content type="html"><![CDATA[<p><em>This is a guest-post by Nimrod Priell (<a href="http://twitter.com/nimrodpriell">@nimrodpriell</a>) about the kind of time-saving tricks that I&#8217;m amazed are so easy to pull off in Rails</em></p>

<p>If you want to have an ActiveRecord macro to define memory-cached, dynamically growing, normalized lookup tables for entity &#8216;type&#8217;-like objects, read along. Or in plain English - if you want to have a table containing, say, ProductTypes which can grow with new types simply when you refer to them, and not keep the Product table containing a thousand repeating &#8216;type=&#8221;book&#8221;&#8217; entries - and gain some insight into ruby metaprogramming techniques - sit down and try to follow through.</p>

<p>A <a href="http://en.wikipedia.org/wiki/Database_normalization">normalized DB</a> means that you want to keep types as separate tables, with foreign keys pointing from your main entity to its type. For instance, instead of:</p>

<pre><code>ID  car_name        car_type
1   Chevrolet Aveo  Compact
2   Ford Fiesta     Compact
3   BMW Z-5         Sports
</code></pre>

<p>You want to have two tables:</p>

<pre><code>ID  car_name        car_type_id
1   Chevrolet Aveo  1
2   Ford Fiesta     1
3   BMW Z-5         2
</code></pre>

<p>And</p>

<pre><code>car_type_id car_type_name
1           Compact
2           Sports
</code></pre>

<p>The pros/cons of a normalized DB can be discussed elsewhere. I&#8217;d just point out a denormalized solution is most useful in settings like <a href="http://en.wikipedia.org/wiki/Column-oriented_DBMS">column oriented DBMSes</a>. For the rest of us folks using standard databases, we usually want to use lookups.</p>

<p>The usual way to do this with ruby on rails is:</p>

<ul>
<li>Generate a CarType model using rails generate model CarType name:string</li>
<li>Link between CarType and Car tables using belongs_to and has_many</li>
</ul>


<p>Then to work with this you can transparently read the car type:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">car</span> <span class="o">=</span> <span class="no">Car</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">car_type</span><span class="o">.</span><span class="n">name</span><span class="err"> </span><span class="c1"># returns &quot;Compact&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby does an awesome job of caching the results for you, so that you&#8217;ll probably not hit the DB every time you get the same car type from different car objects.</p>

<p>You can even make this shorter, by defining a delegate to car_type_name from CarType:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># car_type_name.rb</span>
</span><span class='line'><span class="n">delegate</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="ss">:car</span><span class="p">,</span> <span class="ss">:prefix</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now you can access this as</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># car_type.rb</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">car_type_name</span>
</span></code></pre></td></tr></table></div></figure>


<p>However, it&#8217;s less pleasant to insert with this technique:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">car_type</span><span class="o">.</span><span class="n">car_type_name</span> <span class="o">=</span> <span class="s2">&quot;Sports&quot;</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">car_type</span><span class="o">.</span><span class="n">save!</span>
</span><span class='line'><span class="c1">#Now let&#39;s see what happened to the OTHER compact car</span>
</span><span class='line'><span class="no">Car</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">second</span><span class="o">.</span><span class="n">car_type_name</span> <span class="c1">#Oops, returns &quot;Sports&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Right, what are we doing? We should&#8217;ve used</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">update_attributes</span><span class="p">(</span><span class="n">car_type</span><span class="p">:</span> <span class="no">CarType</span><span class="o">.</span><span class="n">find_or_create_by_name</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="s2">&quot;Sports&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Okay. Probably want to shove that into its own method rather than have this repeated in the code several times. But you also need a helper method for creating cars that way…</p>

<p>Furthermore, ruby is good about caching, but it caches by the exact query used, and the cache expires after the controller action ends. You can configure more advanced caches, perhaps.</p>

<p>The thing is all this can get tedious if you use a normalized structure where you have 15 entities and each has at least one &#8216;type-like&#8217; field. That&#8217;s a whole lot of dangling Type objects. What you really want is an interface like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">car</span> <span class="o">=</span> <span class="no">Car</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">car_type</span> <span class="c1">#returns &quot;Compact&quot;</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">car_type</span> <span class="o">=</span> <span class="s2">&quot;Sports&quot;</span> <span class="c1">#No effect on Car.all.second, just automatically use the second constant</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">car_type</span> <span class="o">=</span> <span class="s2">&quot;Sedan&quot;</span> <span class="c1">#Magically create a new type</span>
</span></code></pre></td></tr></table></div></figure>


<p>Oh, and it&#8217;ll be nice if all of this is cached and you can define car types as constants (or symbols). You obviously still want to be able to run:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CarType</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">:id</span> <span class="o">&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">#Just an example of supposed &quot;arbitrary&quot; SQL involving a real live CarType class</span>
</span></code></pre></td></tr></table></div></figure>


<p>But you wanna minimize generating these numerous type classes. If you&#8217;re like me, you don&#8217;t even want to see them lying around in app/model. Who cares about them?
I&#8217;ve looked thoroughly for a nice rails solution to this, but after failing to find one, I created my own rails metaprogramming hook.
The result of this hook is that you get the exact syntax described above, with only two lines of code (no extra classes or anything):</p>

<p>In your ActiveRecord object simply add</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># car.rb</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;active_record/lookup&#39;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Car</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="c1">#...</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Lookup</span>
</span><span class='line'>  <span class="n">lookup</span> <span class="ss">:car_type</span><span class="p">,</span> <span class="ss">:as</span> <span class="o">=&gt;</span> <span class="ss">:type</span>
</span><span class='line'>  <span class="c1">#…</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&#8217;s it. the generated CarType class (which you won&#8217;t see as a car_type.rb file, obviously, as it is generated in real-time), contains some nice methods to look into the cache as well: So you can call</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CarType</span><span class="o">.</span><span class="n">id_for</span> <span class="s2">&quot;Sports&quot;</span> <span class="c1">#Returns 2</span>
</span><span class='line'><span class="no">CarType</span><span class="o">.</span><span class="n">name_for</span> <span class="mi">1</span> <span class="c1">#Returns &quot;Compact&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>and you can still hack at the underlying ID for an object, if you need to:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">car</span> <span class="o">=</span> <span class="no">Car</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">car_type</span> <span class="o">=</span> <span class="s2">&quot;Sports&quot;</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">car_type_id</span> <span class="c1">#Returns 2</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">car_type_id</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">car_type</span> <span class="c1">#Returns &quot;Compact&quot;</span>
</span><span class='line'><span class="n">car</span><span class="o">.</span><span class="n">find_car_by_type_and_color</span><span class="p">(</span><span class="s2">&quot;Compact&quot;</span><span class="p">,</span> <span class="ss">:blue</span><span class="p">)</span> <span class="c1">#Works, the underlying search is done by the ID</span>
</span></code></pre></td></tr></table></div></figure>


<p>The full source code and gem can be found in <a href="https://github.com/Nimster/RailsLookup">https://github.com/Nimster/RailsLookup</a>. The gem is named rails_lookup so you can just <code>gem install rails_lookup</code> to get the functionality required.</p>

<p>Note you do need to create tables for the new Type classes. The table format is very simple:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">create_table</span> <span class="ss">:car_types</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'><span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:name</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">add_column</span> <span class="ss">:cars</span><span class="p">,</span> <span class="ss">:type</span><span class="p">,</span> <span class="ss">:integer</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this post, however, I would like to elucidate how this is achieved, hopefully teaching some ruby meta-programming and rails considerations on the way.</p>

<p>So how do we achieve that? Well, we start with creating our own Lookup module which can be included into active record classes:</p>

<div><script src='https://gist.github.com/1129084.js?file='></script>
<noscript><pre><code>module Lookup

  module ClassMethods
    #Any new &quot;macros&quot; go here
    def lookup(lookup_name)
    end
  end

  def self.included(host_class)
    host_class.extend(ClassMethods) 
  end
end</code></pre></noscript></div>


<p>This is the basic setup for inserting a new &#8220;macro&#8221; like belongs_to (which is actually a simple class method). When the Lookup module is included in a class, the ruby interpreter will call the hook method &#8220;self.included&#8221; with the class this was included into. We ask to also extend this class, thereby adding any class methods defined in ClassMethods into it.</p>

<p>We can now call &#8220;lookup :car_type, :as => :type&#8221; in our Car class, only that it doesn&#8217;t do anything. Let&#8217;s make it do something. We need to achieve the following things:</p>

<ol>
<li>Create the <code>CarType</code> ActiveRecord</li>
<li>Link the <code>CarType</code> and <code>Car</code> ActiveRecords (with the standard has_many, belongs_to link)</li>
<li>Make the <code>Car#car_type=</code>, <code>Car#car_type</code> methods behave in the way we described above.</li>
<li>(Optional) code-fill the caches when the class loads from the data in the DB</li>
</ol>


<p>We will now present the code for each - when you read through, remember this all runs in the host class context (e.g. Car) so that self is the Car class, and any actions we take are equivalent to having explicitly written them in the Car class itself.</p>

<div><script src='https://gist.github.com/1129091.js?file='></script>
<noscript><pre><code>    def lookup(as_name)
      mycls = self #Class I'm defined in
 
      #We now define the CarType class, as if we were in a file car_type.rb
      cls = Class.new(ActiveRecord::Base) do #Define a new class, extending AR::Base
        #CarType should have the has_many :cars link
        has_many mycls.name.tableize.to_sym

        #These are optional. You can define any additional constraints you like.
        validates_uniqueness_of :name
        validates :name, :presence =&gt; true

        #Methods for using the cache. Providing a second argument saves data into the cache.
        def self.id_for(name, id = nil)
          #We cannot access the class variable for CarType as simply '@@rcaches' because it will
          #look for @@rcaches in the scope of the module we're in.
          class_variable_get(:@@rcaches)[name] ||= id
        end

        #This helper method is the &quot;find_or_create&quot; of the class that also
        #updates the cache and the DB.
        def self.gen_id_for(val)
          id = id_for val
          if id.nil?
            #Define this new possible value
            new_db_obj = find_or_create_by_name val
            id_for val, new_db_obj.id
            name_for new_db_obj.id, val
            id = new_db_obj.id
          end
          id
        end

        #Query the cache for the value that goes with a certain DB ID
        def self.name_for(id, name = nil)
          class_variable_get(:@@caches)[id] ||= name
        end
      end

      #Finally, Bind the created class to a name
      lookup_cls_name = lookup_name.to_s.camelize
      Object.const_set lookup_cls_name, cls #Define it as a global class</code></pre></noscript></div>


<p>The important parts to note here are:</p>

<ul>
<li>How we define a new class and then bind it to the constant &#8220;CarType&#8221; so that after a class containing the lookup (like Car) is referred to (just calling Car.to_s is enough), the CarType is not accessible as if it were inside of a car_type.rb file in our app/models directory.</li>
<li>How we use Rails&#8217; built-in Inflections module which it mixes in to string, to move from so-called &#8220;table_notation&#8221; to CamelNotation and vice versa.</li>
<li>How we use class_variable_get and class_variable_set to access the class variables of the newly created CarType class - because confusingly enough @@var will refer to the class we&#8217;re in now and not the one being defined inside the block, when the code is executed. We discuss initialization of these two variables later on, during part (4).</li>
</ul>


<blockquote><p>Side note: This is not the complete class definition - I shortened it a bit to remove details which are handled in the gem version, like supporting Rails&#8217; where() methods, support anonymous classes that have lookups and supporting multiple classes using the same lookup. If you&#8217;re interested in these, I urge you to check out the gem.</p></blockquote>


<p>Note also that we have already included the has_many link inside of CarType. In the same way, we will include the belongs_to in the other direction. We do this and also define the special accessors for getting and setting the CarType as a String:</p>

<div><script src='https://gist.github.com/1129101.js?file='></script>
<noscript><pre><code>   def lookup(as_name)
     #...

     #Now, define the foreign key from Car to CarType.
     belongs_to lookup_name.to_s.to_sym, :foreign_key =&gt; &quot;#{as_name}&quot;.to_sym
     validates &quot;#{as_name.to_s}_id&quot;.to_sym, :presence =&gt; true

      #Now we define the &quot;delegates&quot; that will allow us to just set call car.car_type = &quot;Sports&quot;
      #Define a setter for car_type
      define_method(&quot;#{as_name.to_s}_id=&quot;) do |id|
        #We would have used instance_variable_get. However rails maintains a hash of attributes 
        #that we must use to play nicely along with rails. Here we write the ID of the value
        #instead of the value itself inside the field.
        write_attribute &quot;#{as_name.to_s}&quot;.to_sym, id
      end

      # Setter via String
      define_method(&quot;#{as_name.to_s}=&quot;) do |val|
        id = cls.gen_id_for val
        write_attribute &quot;#{as_name.to_s}&quot;.to_sym, id
      end

      # Getter for the ID
      define_method(&quot;#{as_name.to_s}_id&quot;) do 
        read_attribute &quot;#{as_name.to_s}&quot;.to_sym
      end

      #Define the getter
      define_method(&quot;#{as_name.to_s}&quot;) do 
        id = read_attribute &quot;#{as_name.to_s}&quot;.to_sym
        if not id.nil?
          value = cls.name_for id
          if value.nil?
            # This is reached in case many processes use the DB and some other process
            # inserted a new value that we were not aware of, but who's ID was inserted
            # into this object.
            lookup_obj = cls.find_by_id id
            if not lookup_obj.nil?
              cls.name_for id, lookup_obj.name
              cls.id_for lookup_obj.name, id             
            end
          end
        end
        value
      end

    #...
  end
</code></pre></noscript></div>


<p>The important thing to note here is how we employ ActiveRecord&#8217;s read_attribute and write_attribute. The data in your ActiveRecord is maintained in a hash called attributes where the names of fields (in the DB) are saved along with their values. A classic setter method like <code>car.car_type = "Compact"</code> would set an attribute entry in the hash with :car_type => &#8220;Compact&#8221;, which will later cause SELECT or INSERT statements to try and access the in existing column car_type. Our approach is to intercept every time the &#8216;type&#8217; attribute is being written (with a String), and replace that String with a numerical ID (meanwhile creating the corresponding CarType entry if necessary).</p>

<p>Finally, prefill the caches from the DB when this class loads. This is optional but as the list of types is likely to be rather small, a real-time expanding cache is just wasting some user time and could be better done ahead.</p>

<div><script src='https://gist.github.com/1129105.js?file='></script>
<noscript><pre><code>    def lookup(as_name)
      #...

      all_vals = cls.all
      cls.class_variable_set(:@@rcaches, all_vals.inject({}) do |r, obj|
          r[obj.name] = obj.id
          r
        end)
      cls.class_variable_set(:@@caches, all_vals.inject([]) do |r, obj|
          r[obj.id] = obj.name
          r
      end)
    end</code></pre></noscript></div>


<p>That&#8217;s it. If you don&#8217;t like the caching this becomes even easier - remove all of the references to @@rcaches and @@caches and you simply saved yourself the trouble of manually maintaining CarType objects.</p>

<p>The only remaining thing is to define your migrations for creating the actual database tables. After all, that&#8217;s something you only want to do once and not every time this class loads, so this isn&#8217;t the place for it. However, it&#8217;s easy enough to create your own scaffolds so that a command like</p>

<pre><code>rails generate migration create_car_type_lookup_for_car
</code></pre>

<p>will automatically create the migration. This is the required migration</p>

<div><script src='https://gist.github.com/1129113.js?file='></script>
<noscript><pre><code>class CreateCarTypeLookupForCar &lt; ActiveRecord::Migration
  def self.up
    create_table :car_types do |t|
      t.string :name
      t.timestamps #Btw you can remove these, I don't much like them in type tables anyway
    end

    remove_column :cars, :type #Let's assume you have one of those now…
    add_column :cars, :type, :integer #Maybe put not_null constraints here.
  end

  def self.down
    drop_table :car_types
    remove_column :cars, :type
    add_column :cars, :type, :string
  end
end</code></pre></noscript></div>


<p>I&#8217;ll let you work out the details for actually migrating the data yourself - this post has already ran long enough. I urge you to read more in the gem&#8217;s source code <a href="https://github.com/Nimster/RailsLookup/">here</a>. There are some tricks I&#8217;ve omitted to make rails be able to support calls like Car.find_by_car_type_and_color &#8220;Compact&#8221;, :blue (when the actual SQL query should be asking about car_type_id = 1), and some more options for setting the lookup itself, handling Car.where(type: &#8220;Compact&#8221;) or multiple classes using a single lookup.</p>

<p>I hope this helped you and saved a lot of time and frustration. I&#8217;d like to thank Aviv for hosting me here. If you don&#8217;t already, read the rest of his blog, you&#8217;re sure to learn something useful! Follow me on twitter: <a href="http://twitter.com/nimrodpriell">@nimrodpriell</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Today I Got Burnt by Isolated Tests]]></title>
    <link href="http://www.codelord.net/2011/08/07/today-i-got-burnt-by-isolated-tests/"/>
    <updated>2011-08-07T23:06:26+03:00</updated>
    <id>http://www.codelord.net/2011/08/07/today-i-got-burnt-by-isolated-tests</id>
    <content type="html"><![CDATA[<p>Generally, I prefer the <a href="http://www.amazon.com/gp/product/0321503627/ref=as_li_tf_tl?ie=UTF8&amp;tag=thcodu02-20&amp;linkCode=as2&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321503627">GOOS</a><img src="http://www.assoc-amazon.com/e/ir?t=thcodu02-20&l=as2&o=1&a=0321503627" style="width: 0; height: 0; display: none; border: none !important;"> school of TDD which includes isolating my classes as much as possible, putting mocks and stubs everywhere. Even though one of its known disadvantages is that you risk testing your classes in a fake environment that won&#8217;t match the real production code using it, I&#8217;ve rarely come across a place where I got really bitten by it.</p>

<p>Today I set out with my pair to add some functionality to a certain class. That class had about 30-40 lines of code and about 10 test cases, which seemed quite decent. We added our changes TDD style and just couldn&#8217;t get the thing working. After digging into it for a few more minutes we suddenly realized the class shouldn&#8217;t be working at all and checking in the DB showed that indeed the last time that specific feature had any effect was 3 months ago!</p>

<p>Fortunately for us, all the problems that caused this bug are solved problems, we just need to get better at implementing the solutions:</p>

<p>Isolated tests go much better hand in hand with a few <strong><em>integration tests</em></strong> (some might say the right term is acceptance tests) that execute the whole system and make sure the features are working. Had we had those, we would have caught the bug much sooner.</p>

<p>The bug was introduced in a <strong><em>huge commit</em></strong> that changes 35 files and 1500 lines of code. We usually try and go over every commit made, even if it was paired, because we believe in collective code ownership, but it&#8217;s impossible to go over such a huge diff and find these intricacies. Working in small baby steps makes it far less likely to break something and more likely that someone else will spot your mistakes. Huge refactorings give me the creeps.</p>

<p>After the change was committed, it was not <strong><em>followed-through</em></strong>: this specific feature is a feature you usually notice over a few days and we missed out on making sure it kept working. We moved on to other tasks and forgot all about it, thinking it was working all this time. Had we taken the time to make sure we were seeing, it would have been squashed by the next deployment.</p>

<p>Any of these would have helped us spot sooner that the isolated tests were actually testing the code against a scenario that never happens. These tiny changes of our workflow would have made several of our users happier over this timeframe.</p>

<p>Hopefully all is well now and the feature is back at 100%, but only time will tell whether we were able to learn from this mishap.</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell Hackery: The Use of "cd ."]]></title>
    <link href="http://www.codelord.net/2011/08/04/shell-hackery-the-use-of-cd/"/>
    <updated>2011-08-04T06:36:15+03:00</updated>
    <id>http://www.codelord.net/2011/08/04/shell-hackery-the-use-of-cd</id>
    <content type="html"><![CDATA[<p>I have a nasty habit of going over my bash history every once in a while. Usually I sort commands by frequency to find stuff I can automate/alias. Last time I came across <code>cd .</code> and thought I&#8217;d write up a little explanation of why I find this seemingly useless command useful.</p>

<p>So what does it do? <code>cd .</code> literally means &#8220;change directory to the current directory&#8221;, which sounds like a no-op. The point is that sometimes the current directory is no longer the current directory! Let&#8217;s start with an example.</p>

<p>Say I have a git repository on my_repo/ and on its master branch there&#8217;s a my_repo/folder directory and on its bugfix branch that directory doesn&#8217;t exist. Now imagine I have a terminal window open after performing the following command:</p>

<pre><code>cd my_repo/folder # now on branch master
</code></pre>

<p>And now, while that terminal is open I need to switch to the bugfix branch for a few minutes, do my thing and return to it. If I switch branches using a different terminal or some GUI tool, what becomes of my terminal&#8217;s shell? When I switched to the bugfix branch, git essentially removed that directory the shell was in, and when I returned to the master branch, the directory was put back into place.</p>

<p>So, one might expect that after switch back and forth between branches and returning to my original terminal, simply executing <code>ls -l</code> will show that everything is ok. But it won&#8217;t. What I would actually see when running <code>ls -l</code> is that the current directory is empty!</p>

<p>Oh no! Are all our files lost? Nope. They&#8217;re right there in my_repo/folder, but our shell doesn&#8217;t know that. To understand why, we need to dig a bit deeper. When a unix process accesses any file or directory, it obtains a file descriptor to it. That includes a shell&#8217;s current directory - all throughout its lifetime, it has an open fd of the current dir. You can see that by running <code>lsof -p [your shell pid]</code>.</p>

<p>When process A holds an open fd to a file/directory and process B removes that directory, what should happen? Unix doesn&#8217;t have that file locking mechanism windows does. What it does do is remove the file from anywhere except still holding it somewhere til process A finishes working with it. What this means is that if, for example, you&#8217;ve got a file open in some software and accidentally &#8220;rm&#8221;ed the file, you can still recover the file because it&#8217;s held somewhere by the open program. You can see an example for restoring files this way on linux <a href="http://www.linux.com/archive/articles/58142">here</a>.</p>

<p>Back to our problem! Our shell process is now sitting with its current directory actually being some phantom directory that is no more. That means that even after we checked out the master branch again and the directory was already there, no one updated our shell regarding that. It does know it&#8217;s in &#8220;my_repo/folder&#8221;, though.</p>

<p>That means that in order to quickly get our terminal back to being useable (say, we want <code>ls</code> to actually show stuff) we can, of course, be all lame, close the shell and open a new one. Or, we can &#8220;refresh&#8221; the file descriptor to the current directory. How?</p>

<pre><code>cd .
</code></pre>

<p>Hope you learned something new!</p>

<p>You should <a href="http://feeds.feedburner.com/TheCodeDump">subscribe</a> to my feed and <a href="http://twitter.com/avivby">follow</a> me on twitter!</p>
]]></content>
  </entry>
  
</feed>
